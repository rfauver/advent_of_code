# Day 1
# part 1

weights = %w[124846 99745 110203 140165 110228 65706 128481 75921 57331 72951 133413 99524 79546 54653 55166 66215 147696 91054 64752 76311 139572 61110 65846 121489 147534 66591 109963 83412 138965 70102 128844 141002 77655 68539 128687 70559 140747 51397 117550 91515 60960 133280 83244 106644 100333 67608 118120 60024 115547 136229 108403 128776 109599 111189 98538 129715 116630 120772 80105 52489 130247 144003 85226 83769 137921 54737 126406 108756 149633 138201 78980 126909 125768 86214 54873 97723 92677 120405 143317 102981 142668 100398 67258 126583 114611 102525 115205 78329 140703 136978 94465 129510 81039 141997 120643 55377 89966 113672 112665 51323].map(&:to_i);
weights.sum do |w|
  (w/3).floor - 2
end

# part 2

weights.sum do |w|
  curr_w = w
  total = 0
  while curr_w.positive?
    curr_w = (curr_w/3).floor - 2
    total += curr_w if curr_w.positive?
  end
  total
end


# Day 2
# part 1
input = [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,9,1,19,1,19,5,23,1,23,5,27,2,27,10,31,1,31,9,35,1,35,5,39,1,6,39,43,2,9,43,47,1,5,47,51,2,6,51,55,1,5,55,59,2,10,59,63,1,63,6,67,2,67,6,71,2,10,71,75,1,6,75,79,2,79,9,83,1,83,5,87,1,87,9,91,1,91,9,95,1,10,95,99,1,99,13,103,2,6,103,107,1,107,5,111,1,6,111,115,1,9,115,119,1,119,9,123,2,123,10,127,1,6,127,131,2,131,13,135,1,13,135,139,1,9,139,143,1,9,143,147,1,147,13,151,1,151,9,155,1,155,13,159,1,6,159,163,1,13,163,167,1,2,167,171,1,171,13,0,99,2,0,14,0];
program = input;
program[1] = 12
program[2] = 2

pos = 0
loop do
  case program[pos]
  when 1
    program[program[pos+3]] = program[program[pos+1]] + program[program[pos+2]]
  when 2
    program[program[pos+3]] = program[program[pos+1]] * program[program[pos+2]]
  when 99
    break
  else
    puts '---'
  end
  pos += 4
end

# part 2
0.upto(99) do |noun|
  0.upto(99) do |verb|
    program = input.dup
    program[1] = noun
    program[2] = verb
    pos = 0
    loop do
      case program[pos]
      when 1
        program[program[pos+3]] = program[program[pos+1]] + program[program[pos+2]]
      when 2
        program[program[pos+3]] = program[program[pos+1]] * program[program[pos+2]]
      when 99
        break
      else
        break
      end
      pos += 4
    end
    puts noun * 100 + verb if program[0] == 19690720
  end
end

# Day 3
# part 1
w1 = %w[R1009 D117 L888 D799 L611 U766 L832 U859 L892 D79 R645 U191 L681 D787 R447 D429 L988 U536 L486 D832 R221 D619 R268 D545 L706 U234 L528 D453 R493 D24 L688 U658 L74 D281 R910 D849 L5 U16 R935 D399 L417 U609 R22 D782 L432 D83 L357 D982 L902 U294 L338 U102 R342 D621 R106 U979 L238 U158 R930 D948 L700 D808 R445 U897 R980 U227 L466 D416 R244 U396 R576 U157 R548 U795 R709 U550 R137 U212 L977 U786 L423 D792 R391 D974 R390 U771 R270 D409 L917 D9 R412 D699 L170 D276 L912 U710 R814 U656 R4 D800 R596 U970 L194 U315 L845 D490 L303 U514 L675 D737 L880 D86 L253 D525 R861 D5 R424 D113 L764 D900 R485 D421 R125 U684 R53 U96 L871 U260 R456 U378 L448 D450 L903 D482 R750 U961 R264 D501 R605 D367 R550 U642 R228 U164 L343 U868 R595 D318 R452 U845 L571 D281 R49 D889 L481 U963 R182 U358 R454 U267 L790 D252 R455 D188 L73 U256 L835 D816 R503 U895 L259 U418 R642 U818 L187 U355 R772 U466 R21 U91 R707 D349 L200 U305 R931 D982 L334 D416 L247 D935 L326 U449 L398 D914 R602 U10 R762 D944 L639 D141 L457 U579 L198 U527 R750 U167 R816 D753 R850 D281 L712 D583 L172 D254 L544 D456 R966 U839 R673 D479 R730 D912 R992 D969 R766 U205 R477 D719 R172 D735 R998 D687 R698 D407 R172 U945 R199 U348 L256 D876 R580 U770 L483 D437 R353 D214 R619 U541 R234 D962 R842 U639 R520 D354 L279 D15 R42 U138 L321 D376 L628 D893 L670 D574 L339 U298 L321 D120 L370 U408 L333 D353 L263 D79 R535 D487 R113 D638 R623 D59 L508 D866 R315 U166 L534 U927 L401 D626 L19 D994 L778 D317 L936 U207 L768 U948 R452 U165 R864 D283 L874];
w2 = %w[L995 D93 L293 U447 L793 D605 R497 D155 L542 D570 R113 D779 L510 U367 L71 D980 R237 U290 L983 U49 R745 U182 L922 D174 L189 D629 R315 D203 R533 U72 L981 D848 L616 U654 R445 D864 R526 D668 L678 U378 L740 D840 L202 D429 R136 D998 L116 D554 L893 U759 R617 U942 R999 U582 L220 U447 R895 D13 R217 U743 L865 U950 R91 D381 R662 D518 L798 D637 L213 D93 L231 D185 R704 U581 L268 U773 R405 U862 R796 U73 L891 U553 L952 U450 R778 D868 R329 D669 L182 U378 L933 D83 R574 U807 R785 D278 R139 D362 R8 U546 R651 U241 L462 D309 L261 D307 L85 U701 L913 U271 R814 U723 L777 D256 R417 U814 L461 U652 R198 D747 R914 U520 R806 U956 L771 D229 R984 U685 R663 D812 R650 U214 R839 U574 L10 U66 R644 D371 L917 D819 L73 D236 R277 U611 R390 U723 L129 D496 L552 D451 R584 U105 L805 U165 R179 D372 L405 D702 R14 U332 L893 D419 R342 D146 R907 D672 L316 U257 L903 U919 L942 U771 R879 U624 L280 U150 L320 U220 R590 D242 R744 U291 R562 U418 L898 U66 L564 U495 R837 D555 L739 D780 R409 D122 L426 D857 R937 D600 R428 D592 R727 U917 R256 D680 L422 U630 L14 U240 R617 D664 L961 D554 L302 U925 L376 D187 L700 D31 L762 U397 L554 D217 R679 D683 R680 D572 R54 D164 L940 D523 R140 U52 L506 D638 R331 D415 R389 D884 R410 D62 R691 U665 R889 U864 L663 D690 R487 U811 L190 U780 L758 U267 R155 D344 L133 D137 R93 D229 L729 U878 L889 D603 R288 U890 R251 U531 L249 D995 R863 D257 R655 D311 R874 U356 L833 U151 L741 U246 R694 D899 L48 U915 L900 U757 L861 U402 R971 U537 R460 D844 R54 U956 L151 U74 R892 U248 R677 D881 R99 D931 R427];


w1_positions = []
w2_positions = []
pos = [0,0]
w1.each do |step|
  dir = step.chars.first
  num = step[1..-1].to_i
  case dir
  when 'R'
    num.times { pos[0] += 1; w1_positions << pos.dup }
  when 'D'
    num.times { pos[1] -= 1; w1_positions << pos.dup }
  when 'L'
    num.times { pos[0] -= 1; w1_positions << pos.dup }
  when 'U'
    num.times { pos[1] += 1; w1_positions << pos.dup }
  end
end

pos = [0,0]
w2.each do |step|
  dir = step.chars.first
  num = step[1..-1].to_i
  case dir
  when 'R'
    num.times { pos[0] += 1; w2_positions << pos.dup }
  when 'D'
    num.times { pos[1] -= 1; w2_positions << pos.dup }
  when 'L'
    num.times { pos[0] -= 1; w2_positions << pos.dup }
  when 'U'
    num.times { pos[1] += 1; w2_positions << pos.dup }
  end
end;

(w1_positions & w2_positions).map do |position|
  position.map(&:abs).sum
end.min

# part 2
w1_positions = []
w2_positions = []
pos = [0,0]
w1.each do |step|
  dir = step.chars.first
  num = step[1..-1].to_i
  case dir
  when 'R'
    num.times { pos[0] += 1; w1_positions << pos.dup }
  when 'D'
    num.times { pos[1] -= 1; w1_positions << pos.dup }
  when 'L'
    num.times { pos[0] -= 1; w1_positions << pos.dup }
  when 'U'
    num.times { pos[1] += 1; w1_positions << pos.dup }
  end
end

pos = [0,0]
w2.each do |step|
  dir = step.chars.first
  num = step[1..-1].to_i
  case dir
  when 'R'
    num.times { pos[0] += 1; w2_positions << pos.dup }
  when 'D'
    num.times { pos[1] -= 1; w2_positions << pos.dup }
  when 'L'
    num.times { pos[0] -= 1; w2_positions << pos.dup }
  when 'U'
    num.times { pos[1] += 1; w2_positions << pos.dup }
  end
end;

(w1_positions & w2_positions).map do |position|
  w1_positions.index(position) + w2_positions.index(position) + 2
end.min


# Day 4
# part 1
273025.upto(767253).select do |pass|
  has_pair = false
  ascending = true
  pass.to_s.chars.each_cons(2) do |(c1, c2)|
    has_pair = c1 == c2 unless has_pair
    ascending = false if c2 < c1
    break unless ascending
  end
  has_pair && ascending
end.count

# part 2
273025.upto(767253).select do |pass|
  last_pair_num = nil
  has_pair = false
  ascending = true
  pass.to_s.chars.each_cons(2) do |(c1, c2)|
    if c1 == c2
      if !has_pair
        has_pair = true unless last_pair_num == c2
        last_pair_num = c1
      elsif last_pair_num == c2
        has_pair = false
      end
    else
      last_pair_num = nil
    end
    ascending = false if c2 < c1
    # puts "#{c1}:#{c2}"
    # puts "has_pair: #{has_pair}"
    # puts "last_pair_num: #{last_pair_num}"
    # puts "ascending: #{ascending}"
    break unless ascending
  end
  has_pair && ascending
end.count

# Day 5
# part 1

class Intcode
  def initialize(program)
    @program = program
    @point = 0
  end

  def run
    loop do
      opcode, modes = read_instruction
      params = modes.map.with_index do |mode, i|
        read_method = mode.zero? ? :read_at : :value_at
        method(read_method).call(@point + i + 1)
      end
      case opcode
      when 1
        @program[value_at(@point + 3)] = params[0] + params[1]
      when 2
        @program[value_at(@point + 3)] = params[0] * params[1]
      when 3
        @program[value_at(@point + 1)] = 1
      when 4
        puts params[0]
      when 99
        break
      else
        puts '---'
      end
      @point += (modes + 1)
    end
  end

  def value_at(address)
    @program[address]
  end

  def read_at(address)
    @program[@program[address]]
  end

  def read_instruction
    instruction = value_at(@point).to_s
    opcode = instruction.slice!(-2..-1).to_i
    modes = instruction.chars.reverse.map(&:to_i)
    [opcode, modes]
  end
end

# Day 6
# part 1
input = %w[BYZ)LMV 2CT)GV2 6RK)HK7 RJJ)MVV YFQ)4LC Q58)D46 D4T)3X8 9GF)P89 TFP)9VJ 5J9)YYK WKB)6B4 PM4)3G9 NRG)QDB Y2X)464 T1S)MJ1 RQ8)PD6 XP7)3F2 Y4Q)65H KBG)ZMM PCT)H5K YPG)NZ6 1KP)RFT 3Y7)ZN5 BYH)RWH 1BQ)X8J 1VJ)MWT GHH)7NX CWZ)WC1 5YB)3F5 YZG)NQJ 18F)VZV Z6Z)ZX9 PT3)KWY QR2)5QK HQL)6LJ JMG)S4N 4RL)PWG G1H)J8W WCX)RB3 CR4)GX5 4YN)BDT ZQY)C8H JRF)Y62 GPY)4RN 6TF)R8Y JWD)L9L QQ5)ZMX YY5)JFY F15)JCJ J71)ZT8 9KF)JR8 82X)449 544)WKB QRN)MKW Y57)1KV 2C2)6C7 QNQ)MKH X1H)XK6 QBH)GKH FMY)9P9 7DZ)Q9L 8HP)F3V XR9)4XS 9CP)25Q 4PC)92N 87B)C3N FFW)1CY DFH)3VC 4RS)PM4 LQF)J6P ZXM)1K7 WYZ)C22 K1Y)YMZ KXV)P93 K4G)MYZ RWM)VC1 T8S)93S 21J)MHY MF7)N4L 255)BDL 1MG)M4B KJL)K7J MLX)ZR7 COM)WWS WPN)LRP DQ6)9XW DMF)RJ3 JNL)QMM 68T)QLS NQ1)RP3 18C)7DC KRH)2RT KGT)DPL 99Q)SWR KRP)DCW Y3P)PCT PZJ)2RN FTY)R6J 7W2)T32 6ZZ)VZ3 DPL)7KV VX2)NH8 2QF)GS5 Q8S)SZ4 VP4)8B8 S6X)BYZ RKK)QQ5 LYN)S7C ZZD)ZTP 59C)25M 3SD)KPS GPY)5LY B6Q)9M6 SDL)SGT VY6)J47 KY6)WMB M3Z)CWZ 287)6FY JR8)5LP DXG)8GP 5GV)Q15 WQ3)65V MHY)ZTD 2KN)1LQ FPF)7W2 NPB)6NL T32)9TC JTZ)YHM VNT)QWK GNZ)VBD JCW)JRR N2B)TVX VF2)P38 V5Z)3W5 SST)9LZ TRC)PYG 9VJ)SSX 8BD)TXH WVM)XRV Z5B)T93 Z5L)T7K H1V)YOU NKX)54Z 4XS)DZK D3V)S4K Q62)FWW SWD)DJT 2MJ)MXT 98J)17N GDZ)YN6 DRP)4PC 4L3)VNG R7G)7M9 WX5)MFM 2S9)BK5 N9H)FDR 22T)Y3Y L65)XLK 3DJ)S18 S18)WHR S1Q)GYH BF9)99R CDW)MB6 FF7)44W 5X7)XSL QG3)WC8 6Q4)83D LP6)NTH V84)X6W SGR)FFW CVX)54C 6KD)RML KZV)JRY KY5)W9D L4N)38R GVD)KXQ RCK)XNX XRV)TKH 5JZ)G19 Q5V)7VD FYK)2MQ VKV)8ZL YQM)6XF DKB)SND HMZ)689 W2S)2YB SWR)ZZD MGQ)TW3 3Y5)HHP DJT)H7L VNV)HMZ C11)PWB M3Z)SZ2 DHF)QG3 J9D)LQF 3LC)5YB XQQ)DRY HWQ)27J 4W8)FMF TN1)VXT 3GJ)FFB LRP)NPB LR2)5ZR ZLJ)5V4 KXN)5QM TXH)T4W VNX)9ZB J47)FPC D9Y)9M7 MKB)5VF RMC)VQ3 SVL)Z1C RGC)S44 8G4)MZ8 6XK)3HJ R3V)FLX M6N)Y81 RP3)YVK C3B)PFW 4LK)GR1 1QQ)6CC 76J)1KP DYY)QYR PBQ)7X8 VZV)F15 9F2)ZJN VBD)6B2 6X5)WXY 23D)SP2 TQ1)TFW WM1)G1Q 5V4)9NS 2WJ)QQF ZV7)PYK MP4)5DD YC6)KW8 SQ9)XZX X5Q)6NH 54D)2LN 9NS)X5J 7T8)SRT V45)7TG CL7)QDF XV4)9GF ZYQ)H8P 5GM)M5Z QYG)XLH QLS)29F TTB)J6F LGZ)9L7 HTD)C3B 7VD)3Y7 FLQ)GWK SY9)PN1 BHB)MLX 3X4)G43 CV3)DHF 7DM)HFB YM9)8W7 3D9)CMT SKV)64Z DTY)GGD HLV)71T Z6Y)N6H JB2)73Y MVG)LGZ VYV)463 JCS)24L MCX)5TY RWQ)9BS HVV)H4L CN8)8FJ YS5)NY2 7CX)67Y 5JY)LFV 3GQ)2K4 433)KY5 FLQ)MQ7 3FR)CSB TW8)V5Y TY9)5CG PWZ)86Z XTT)3GJ TM5)X18 NNT)KZV RX9)DJY RQS)TN1 S11)TJ4 FTV)KBG 9YC)VCG B8W)H29 5ZH)2V1 MFH)3MG 92Q)M6C XSY)QT2 347)614 DLP)BF9 B1L)KRP NKF)88J DDN)P4C 2RG)JKJ 5GZ)Q8S WJK)GTB RQC)21J J56)3GZ 25M)SGR P29)M1W 3FZ)PXR LLQ)RRJ NLD)PW6 9R7)Y4X JCC)6ZZ 96D)1MF TZV)JJ7 2RN)Q48 Z7G)GD9 85F)JWD PFW)L9K 6TF)S7G DV4)9R7 Z9X)R9X DXD)M6N KWS)DPK 1R6)Q58 1B2)4LT D9M)L4Z JKJ)K4V P36)V7J GTZ)W24 GX5)MZ4 H73)QMT VNG)4SZ 9TV)BD2 CG6)SNS WD1)HTT 9R3)4L3 7KV)96D 8HW)QHV 85K)HML B77)BFL RMB)3WP MVC)B84 6LJ)N3J VPH)4NG 14Q)23D PCB)H1K RRJ)9KY W24)VHN RDN)S54 7ZS)C28 FWZ)FRW 7JQ)NNY 492)CG6 NWC)ZZW JF2)YY5 6B4)5KN LZY)JTZ P3V)4D7 NVT)1MG SGT)P2M 2NX)WJJ K6L)64P KXL)X7Z R2D)NPQ 33H)P62 7SL)HF4 FYF)GKD NT5)XN9 6TL)BVZ 5YK)K4B XDG)347 B2P)8BF B5Y)8NZ DDC)TW6 GY6)XYL T7D)D1Q MXJ)6D6 6NG)P3P XSQ)D4T HY9)RMB K6L)ND1 RHL)MKB KRH)QB7 SMS)BBM DCW)GG2 SMZ)1SY ZVP)C53 CJJ)ZRB 3VC)RFC F3V)713 9KM)83Z 18C)22W 7R9)RCX QMT)Q1R 1VW)J8N VSD)FWZ W61)RMC NQ4)Z61 LTN)KVP YYK)V5S 1GP)7W6 BJW)RQJ FRW)5JZ 1JF)KTT ND1)N6L 69L)R48 TW6)NZC 6VG)RCM FQR)5Z9 JTD)G9N SDY)5T3 S33)925 1SY)9SY QF6)964 2ZH)BTK 1GC)22S DJT)FCD SKD)K79 VG1)QRQ S7S)346 8GP)YZG 25R)1QQ G4G)RWM BHW)4JF DHG)S1S NJP)L5Z ZTP)V5B 2K4)8HK RPQ)KRH VXT)8TN BVZ)P3T HQ8)5GM C22)PMP 2B2)RH7 PWG)QWH B45)VP4 RSR)WLL 2RT)1D2 V5Y)ZGH N3W)ZR9 N46)MD5 CMT)D19 YNF)7CZ 294)ZV9 K4B)NPK 5LP)CXN BY9)6DF NZ6)2QM LRJ)Q25 9ZL)G5B 9VF)GLK VH8)KJL PWM)W5W Z61)3SD FWZ)1VX YMZ)4V7 LP7)WZF 3TC)BBV 6QK)58C W6T)ZCM LMV)3SG RXW)X9C FB3)QXV SFF)54D 9V5)VDX ZCX)HR1 J6F)9CT S7C)FSD 565)YTK GW5)WSN JMG)VKV 83Z)MLH FH1)HJ3 Y3Y)CDW WJ8)Y4Q 54C)GYZ 46L)4F9 M9B)H6Y C97)86G T7D)BHW SFQ)H2J Y3W)M44 G1Q)MXZ M6C)WWR J76)4JB H2D)85F PT6)9VF KK9)6K7 FM1)QVX QX7)7X1 X5D)1J2 YXG)VMD VHP)FTY P62)X6M XBT)V45 2PP)GHP BD2)8BD HCS)59C 38R)VF7 7NX)SQJ 9YX)1GX W92)PDC 3TH)WFL 2P8)W6T H85)693 9NL)CJY P2M)TRF 35P)8VZ R2G)2XZ DRG)LGS XBC)7JQ LH1)QNQ ZR7)ZXG B5H)S1Q YG1)LTN LLY)74V 4RN)Z6Y P9R)17B TFW)N4Y HLS)JZL XC8)R7L Z4Q)B5H 6NL)V63 Y5S)T9X F72)JHN PDC)DD5 XF4)RXW QDF)2B2 45M)4J1 WXY)YL8 17N)DRL L9K)TDM 5NN)84K J6P)SG1 3L2)366 RVX)WD1 RML)TNL WJC)7D7 3Y5)DLP 2XZ)9R3 YL8)H3V WW7)NT5 WP9)9MZ 5GQ)G1H BR6)ZG6 F48)QF8 J8H)L57 3HJ)6KD S4M)J9H P3T)DR2 5BP)DYM SHH)JTD TKT)BJJ 9KW)LRC SGT)Y8D ZXG)9CP BSF)LD6 86G)ZD4 NMS)H71 WFH)SP5 5LY)3BB XJT)51Q P6P)SMS WMB)L23 1GX)C34 2MQ)4R5 T66)FPF ZZ8)6T8 Z88)PBQ 2MS)X1H MYZ)98J Q48)JD3 CSN)8J5 XVZ)M6S FHF)HTN HCZ)D3V 9JZ)SDL 38P)HQL 9J9)CJK MPM)M92 N1X)B6Q ZN5)JW8 JG6)3RK R2G)TJ3 SKD)HLT W8R)GBT 58C)RGC ZCM)26D MKM)5BP 71T)M1Z C2M)KNC SZ2)2YX XJX)4B3 2BK)76J XQ6)FZV VNK)4RS 7MQ)RMS FCD)34C TF3)L4F 23D)XJ2 W87)62T 25M)QNS DDS)VG1 F17)SH4 LL6)5T2 JYP)DFH 5NN)V2X 4R5)Q5V Q25)Z8H K6Q)BDR R2K)PZJ FP7)2S1 KMN)3VW ZT8)H9X W33)43Y 758)R7G 8QB)6LC 6LC)MHQ 88J)GLF H1K)N12 BTK)DMF ZG6)TFR ZPZ)8TT DJY)LSZ S1Q)FY1 74K)MVC B34)9BH 5BP)W1Z N3W)TLS 1J2)43R 9PG)HLS Q74)8M5 2GH)6VG Z5B)B45 L5Z)433 JFC)ZKY VC1)HT7 229)GW5 QF8)FTC YB8)THG 55B)27V DF4)J9R R7J)2FL N15)H5C RZN)5N3 B8C)WBW 7M9)VN2 8T1)7DM VN9)5KR FYJ)SKV MVG)1VL GRG)ZK2 7HH)3S1 Q85)9PG BGZ)MK7 H39)P3V 6CF)FLQ PK6)VYV 9MN)6NP FY4)PQJ CR4)LH1 7RL)RSR JRY)1W6 6RV)R11 MTV)VSD N26)LWB C4F)3X4 9BK)LK2 PB3)WQB JKJ)NWL BDL)KBT K35)9F2 WXN)1RD FK9)XBT FZT)34D 5SL)B34 6XK)CDV 7XH)7PC YHM)6VR 7DC)X5D FL1)3GQ 7FM)67R 6VG)XQQ W1Z)2JK Y1V)GZS R5J)6JY 4YL)ZW2 H2F)7CX VXQ)HYQ 65V)3CP KTT)WW7 6V7)T8S LFR)LP7 5CG)GFB VCG)LCY KWY)C48 2YX)JG8 73Y)6F1 QJT)DGK VJB)Z7G 8NZ)CDB GXW)18C WVM)JSX XLK)9KF JTD)PT6 8G3)TJ9 67R)YZH J7G)5VG 4JB)5GK R6P)7HH X7Z)N8X LDL)294 H2J)T11 DZK)XTT 8VZ)HWQ DZ2)GKV NTX)FP7 2JK)TTB FS9)22T X6D)DC3 LK2)CS3 ZNQ)RPM TW3)BK4 MLH)NWC 2WN)RVX M16)BJW FDR)K6L 7T8)ZWX RPM)4LK 3F5)BZT TKK)KJ8 6CR)C5V XHY)X9T ZG9)VFJ D5Z)S82 HJ3)1GP JD3)BB2 ZKY)6RK 9M6)175 XM7)KSZ ZZN)R2F 5T2)VY6 1NY)878 GS5)B61 MNS)N6Z MVF)P74 LR9)PXG 572)229 9GD)HSL S4N)XBC 283)TRC SC1)ZCX HLT)MSD 9M6)SFQ SJD)RBR 7F7)RPQ PYG)BPR X6M)RSH 35P)VSJ CXN)4QX GWG)KZQ SWL)DKK QHV)1B2 BSC)H2D 1K8)B3G Z78)LPF K5Z)7DZ BXR)HBQ T8T)LNW Y2V)3Q9 BPR)HCS TDM)DHS MKH)1NJ T3N)VF2 GNH)BKP MQ7)74K 4NL)YB8 449)LV3 NXG)WD4 TXX)3L2 PMM)TD9 PYK)1NY 9MZ)CHL K79)RL1 F3V)XHY MXM)FYF V2X)SZR ZZN)XBJ 2P5)XH9 XYL)4XL P61)MMF NWL)P9R 2DQ)1VJ 2G6)2MS B45)GRG BB2)JC9 H3J)LLQ TD9)NJP PQJ)MT7 5R9)2BM RFD)WB8 8SP)WGJ SDC)RY4 ZTJ)PT3 4PQ)VNX 5ZH)BFW 27J)Q62 SG1)XQ6 CHT)6NG WYV)7FM TF9)ZP4 K8C)L4N 86G)VQD GBG)FFH 5N3)TF3 5KR)WQQ ZLY)KB8 CR2)TCV ZWX)KMN DL8)MGQ PCL)L6H B1Q)T2G VNY)WTY NGL)JBQ HTN)YML F8S)L4V MWR)Z9H ZGH)7ZS RJG)QMB 35R)CR2 9PD)P6P 9BH)J56 K9G)P41 K7F)WMP SYM)K26 XF3)BQF RY4)N75 XRQ)3NN X8J)5SL W6V)ZHV Y3P)M14 CS3)JRF LQJ)LYN V5Y)BRW 8J5)GHH HFB)JF2 V63)3YQ GPX)572 6GD)7F7 8HK)B8W 68Y)QGR ZK2)VL1 QMM)J7G 198)38P WTY)8RC WFL)QV2 K6B)TXX 3F2)QF6 QDF)TQL 22T)3KS 8BH)2P8 7WP)VV3 3TH)HM1 CDB)F8C SMZ)M5J MWJ)4FL X4J)8SP H71)WZC 356)1HX Y9Z)RLR M1Z)SDC L9L)RDN 9PD)GNB DGK)9TV DD5)Q5F XR5)6TF 6NH)SF8 8ZL)SQ9 FFH)K5L 6D6)36R N7P)5Z3 CDV)BPY FKR)DTY J8W)1S2 F7M)HLV 17B)XVZ 9CT)XHF XL4)GNZ XZX)M16 1GB)MVG C92)K5N Q2W)VLT 54N)S7S GWK)T1D 6VB)3V6 24L)BMT VN2)N2G 9RX)SDY 7ZC)4RL LN5)PK7 BB9)TB5 W4Y)NC8 3SG)PKC SNS)Q9N JK3)FB3 HK7)QWB MJ4)TQ4 GWP)RQT T4W)9RX TD9)9ZL XF3)FYT 4LC)KLH X6W)69V WJJ)T52 QB7)G8R 1W6)WQM QW7)FMY 6GR)1QM ZMM)9GD ZV9)9YX 1NJ)HTK XN9)P1R G8R)D12 FPC)XSY 6DF)WPZ 87M)ZG9 QV2)DKB H5C)GDZ BDR)W2S C53)3D9 L4F)VB5 V5B)3MR PZJ)T99 FFB)LRJ 9HZ)G1Z BBV)2GH 65H)Y9Z X4J)CHT 3X8)FLB 3F3)T7D W7Q)9M1 ZT4)FPP Q5F)QYG FTV)86Q JQ5)L95 53H)RH9 PN1)94Z MT7)3NM DKD)YRQ DR5)CVK LXT)T3N 1D2)RQC 1BK)G87 G95)JK3 P3P)4FP 8DH)TKT F2K)L1Z KNC)N1P PW6)RX9 4SZ)GF8 YVK)2BK WHR)6RV 8PS)DZ2 KB8)Z3Y 4FP)XP7 Z5Q)46L 6C7)544 VJ6)SK8 VL5)L65 8BF)VZX S4K)QW4 M4B)G3W X33)VVD WSN)GBG SP5)YXQ 4XL)84M W5W)Y1Q S82)68S HNN)GPY 6LD)X5Q FPF)JVL 1CY)3Y5 D3F)S6X WJ8)2WN 26B)YL7 4NF)NDC Q15)PSF 52T)FM1 VHN)9V5 MSD)TWC 7D7)KYK 175)J71 L4Z)HY9 4HR)BSF ZMY)TJC RCM)QRN HBQ)XJT 64P)ZXS QDJ)6GD J71)NSN 3WP)3TH NPK)Y6M 6XF)4ZL QT2)MWR N75)WYV GFB)S29 62Z)9NL DXS)GWP 71H)2CT JWD)FWM MK3)GVD 9M1)442 SRT)D8M BRW)P4H M4H)9BV ZVD)5GZ WXP)X33 LPS)Y3P R9D)RVH NL6)Y1V N53)WQ3 SK8)FS9 DY8)52Y D75)CWF Q9L)VJH H4R)KXN 4NG)P29 74G)Z67 GX5)NVT DHS)ZLY LM3)ZYQ 9P9)255 KBT)JCS CVK)Z9X TCW)F8N HJY)LC8 KW8)K17 F82)WYZ D3P)ZVP SJX)NGL 74V)R2K LWB)R9D 14J)71N 9BS)43Z 8GP)3F3 QMB)RDW DR1)RWQ GY7)BXR 255)RHC XLJ)3R3 P9C)NMS KB8)5S5 KLZ)RMG 1WZ)XLJ W1Z)284 XJ2)DL1 N58)XDG HYD)B5Y NDC)RKK 4FL)XSQ CDL)Q85 C62)WF5 94C)DVP 84T)2YY ZTD)PJP S82)DKD 6VR)CBC M6S)W33 949)MFH 4R5)SWP J98)XZ7 F8C)JCW BHX)18F WC1)KGT 9XW)Z2L TCW)84X ZCV)5T7 K6Q)3NT Q9N)FSS 8TN)VKD XF4)G56 J5C)LDL D46)CGG TJ3)96V T5H)D8Y YMN)QJT 1QM)F2K RWH)KXL T52)79Y FSD)KXV XNX)6CR 713)3TC NLF)4LR KY5)H4R CWF)2CD X9C)2S9 ZX9)ZQY JFY)K7H 5HT)Z1L 9TV)HYD 8RC)C77 8MJ)3XG 5L7)7RL VB4)DV3 3Y3)7WP HHP)5GQ XH9)2PP VF7)GWG BPY)7ZC LHY)YNF PPS)WVK ZHV)JQF TKH)B2P QRN)3FZ 8B8)S7K T7K)SJD S7K)YGQ J8N)R7J 4FL)7XD 648)71B G56)MPM P38)68T 5H7)5B9 TWC)PB3 XRV)FK9 WWR)KK9 XK6)F2Q FYT)7T8 N85)54N 8DZ)45M G2F)92Q LCY)ZZ8 PLD)LM3 RQJ)4WJ J6L)315 Y6M)KY6 C53)3DB MWT)Y8S Q62)H2F 6T8)B1J 43Z)5P4 1HX)M8B TVX)84T 2YB)Q68 36R)V6Q T9X)YG1 2YY)NQ1 5YP)GFM QM9)J8H JG8)16C 5VG)N9H M16)JST RJ3)HR2 29J)N6Y 44W)VJ6 9M7)F96 Z67)3RW WLL)NTX CSB)4CL CWP)GGC 84K)W7Q QNQ)N25 NWR)CSN J9H)PG5 DFW)K4G FTC)68Y VF7)4W8 VXT)2NX G5B)FH1 DKK)DRG C77)DJ1 VZ3)XD3 JVC)NRG FLB)SHH 71T)MP4 9NL)VNV RDQ)RJJ GVN)ZT4 84T)MF7 ZP4)4YN WT2)3LC 4D7)4NF 5S5)9J9 MB6)N9N MN3)B99 BFL)4XV BN3)688 5NJ)DPN XK6)C92 D8M)KWS RPV)W5S GX8)FTH VCT)6Q4 FWM)RDQ 86Z)1M5 46L)JNL BX1)1R6 DV3)DXQ JJ7)XFL K5L)7MQ X9J)SJX NNY)MN3 RH9)3DJ GG2)C2M JR8)KLZ 8M5)2SN H9X)BYH R48)ZZ2 YGQ)55P BZT)MXJ N2G)VQJ VQD)NWR 714)565 Q6W)27Y 3NW)NL6 H6H)F5C 4JF)YM9 D3L)T6S 5QJ)QDJ QYR)74G HTT)VB4 9L7)G2F VVY)BR6 G43)BSC M8R)S3F QF6)DCN 2C2)38G BK4)VL5 6K7)6H7 5TY)96L JF2)R2G FLX)7R9 FFX)2MJ M14)C97 34C)Q6W HF4)W8T K7J)TF9 464)4NX MKW)6VB 1S2)YPG JK3)1JF 6ZW)WJ8 38G)XNL 7F7)WXP JST)2ZH LNM)N26 925)GC9 H29)LHG 5B9)K1Y ZD4)RH3 NY2)M1R HF4)2G6 4L6)FKR H2D)2KN 48L)7SQ S1T)4YL DJ1)XL4 B84)1RM 92N)SY9 7X1)MJ3 X32)WVM TJC)Q1T YTK)MWQ WB8)ZV7 H5K)6LD B66)1BQ 4LB)D3F Z3Y)SQB 5Z3)2P5 X6L)BNH 7DR)TQ1 SDC)JY4 RPC)SST DXQ)WCX WH3)YC6 JTZ)DYY 9TL)QW7 LRP)758 TLS)Y2V K5N)D75 MWQ)BX1 TRF)VLZ DYM)PCL JQF)9T7 D12)JG6 3DB)NQ4 VKD)8BH 7XD)WM1 T99)RKQ 4LJ)RHL P4C)K66 TWX)4TX SY9)VJB L6H)MVF LV3)1FB 71N)2PL VFJ)F82 116)95T VSJ)LR2 6CC)W8R R84)HNK 4TX)YWC HTK)82X P6P)B1G Z4L)X9J WVK)HNN BQF)X6L 734)6V7 LY2)HVV Y8D)S1T 1SN)4LJ 3KS)6BX 797)GY6 HR2)P6J NQJ)C4F 3NT)3FR 2PP)Z5Q F8N)8TY 3GZ)4LB BJJ)33H LFV)QL2 TJ8)P9C QWH)JQ5 KJ8)4KV C7W)S33 Y4X)FTV Z2L)JFC B77)5QJ N8X)CDL RQT)HYC 71B)D9M 2LN)LGF YKR)3MX H6Y)116 X5J)LBS 2BY)385 N6Z)C98 5GN)9KW 9TC)RQ8 LPS)RBD T32)YMN W3J)Z6Z 7CZ)NRV MGQ)DXS HQK)2DV HNW)8ZC D3L)SYM H3V)F84 VL1)BY9 LK9)HTD VHQ)WX5 DR2)W6V 3MX)2BY 2PL)5GV V5S)R5J JLB)FL1 TQL)YQM SWP)2DQ 29F)8DH W7W)H39 WGJ)5NJ FQR)P36 PG5)DY8 WZC)F2V ZJN)Y2X P6J)N46 RSH)5X7 7K2)PC9 1WY)LDR 3X8)H3J R7T)LLY Q1T)QRM 9M7)K8C R2P)V43 NRV)GKT SQB)198 2DK)Y5S JVL)9BY WPZ)LR9 ZXS)2VP GY6)JJ6 XD3)3NW XNL)4N5 86Q)YKR 2FL)1K8 F2D)PSP 16C)LY2 TCV)TCW JSX)71H S29)W7W 96L)VX2 YWC)C62 68S)99Q MZ4)2MX WCX)9TL D19)C11 9SY)NNT K26)RQS YML)SMZ K58)6X5 W1B)M4H 3XG)J2R PMP)V84 Q25)CN8 QWB)K58 284)9BK RCX)2C2 1SQ)N3D RFD)TWX 5F6)VN9 22W)WXN QNS)JBB GKT)TKK 1WZ)DXG QZL)VVY 9BK)5YP 1VX)X32 KZQ)5JY DCN)F8X Y6M)N58 ZP4)JLB N9Q)8QB VL1)QBH LYN)8M7 V6Q)RZN 2FL)DF4 F48)TNH MXZ)GXW M92)YLD MSD)CWP F9P)FQR W8T)R7T RDW)TY9 HNK)SVL T3R)JWR XLH)MBV KLH)V5Z WF5)Y3R GR1)8RT 132)DR1 HTT)4HR 27V)8HW FSH)WT2 X9J)5YK 1RM)PTQ DVP)F72 5Z3)BB9 VQ3)WFH QDB)X3S F1C)S4M MK7)PWZ YL7)Y6R 961)WQ4 GZS)1GC ZRB)CR4 62T)BGL 4KV)XRQ GNB)62Z F9P)TJ8 T93)8DZ 94G)5GN ND1)NKX 3NM)K6B QRQ)MK3 GTB)DXD 2CD)XC8 X6M)J9D CBC)5MV JCJ)VNT XBC)RFD GFM)HNW DGK)8B5 346)7XH GF8)GD5 X53)85K GD5)PMM 83Y)JB2 5Z9)ZXW BJJ)H85 XR5)KGW Z9H)YFQ F58)HPW 9M1)RCK VV3)3YX 36M)W61 KDR)1SQ 3G9)D3P CGG)FHB PKC)3Y8 JJ6)VPH FSS)ZCV Z2L)3P9 XLJ)R3V P93)KQQ K17)JCC 7DM)TZV N12)XMC V7J)MJ4 64F)83Y S7G)98Y 84M)LSD KWN)QR2 3W5)F7M ZW2)QPD XFL)9MN MW6)LK9 PMP)XF3 X9T)N9Q CSN)14Q 3Y8)GY7 DRP)GPJ LGS)XM7 RBF)QZL VLZ)Z88 95T)P61 N6H)FHF WMP)DFW N6Y)87B 27Y)F8S QD6)WJC WD4)J5C PD6)WGH 4LT)RJG LPF)BHX JBQ)D3G THG)CVX QWK)G1G WWS)5HT D3G)PCB RMS)FSH 689)69Y LSZ)F1C 315)FY4 HYC)N7P G19)MW6 6F1)QX7 6JY)DHG FWW)F9P F2Q)7D5 83X)LL6 NH8)WT9 XTG)WP9 4B3)MKM WQB)TW8 169)R84 4CL)M8R ZRB)N2B LD6)Y57 L57)B1Q 8RT)LN5 MJ3)9DW 5MV)55B 3Q9)VHQ R8Y)F2H 614)734 22S)FF7 W5S)4L6 JHN)6ZW LDJ)VH8 T11)GVN 2VP)FZT 6H7)2QF SDL)VCT 94Z)5J9 TDH)FYJ R6J)F2D KPS)T8T L6H)HQK 5ZR)14J HML)648 M1W)Q2W MVV)169 QPD)CV3 QVX)LHY WC8)RLH 51Q)8T2 8GF)J76 W92)PPS 96V)R6P ZZ2)WPN 442)92Y 2S1)K35 TB5)7TM 43Y)949 F2H)JMG K4V)DQ6 JY4)R3X GD5)7KF MZ8)DRP BK5)KDR CJK)HQ8 Y88)WJK GLF)H73 PSF)94C Y79)17K LNW)LDJ TNH)N15 MBV)K9G VB5)SAN 6X7)RPV 54Z)SFF 3P9)R2P YLD)961 GPJ)PK6 M5J)BNZ N3J)8CH YXQ)PWM TNL)KL2 JWR)D5Z Z8B)N53 QRM)WH3 N1P)36M 714)64F 92Q)W49 GGD)8HP PK7)FLN K7H)CKT 9V5)DDS Y8S)R2D F8X)N3W S1S)DR5 99R)4NL R3X)5ZH 79Y)8V7 V43)1B9 2S1)H6H 8TT)9PD PXG)7SL 9DW)DGZ 7X1)F1F 3V6)YXG QKF)HJY 2DK)2FC SQJ)DDC 4LR)S38 MJ1)KTK J9R)F48 Q1R)F58 FTY)QKF P1R)1WZ 34D)XTG QY8)LXT MT7)Z4Q SXQ)Q74 8B5)BN3 HVV)XF4 TJ9)W1B 64Z)NXG BFW)9KM 2QM)35H NPQ)X53 NGL)VNY F7M)J6L M8B)W87 3CP)LPS 4QX)1RL BKP)D9Y 8W7)FYK Y62)3Y3 Q68)6X7 CJY)35R 8V7)ZPZ L4V)B2T FLN)1VW S38)83X RH7)9JZ TQ4)6B3 P89)MCX SP2)RBF ZMX)DL8 BMT)6LB PXR)1GB 8ZC)B8C 3BB)MXM 43R)W92 Z8H)8GF LSD)1KD GD9)VHP GHP)356 KZY)Y3W GC9)JYP FZV)5L7 1RL)2DK 35H)XJX 5GM)C7W 5DD)ZTJ 6LB)SC1 693)T3R FY1)4PQ QL2)TMP DGZ)ZXM 1B9)T96 43Z)492 C98)Z5B L95)K6Q 3MG)YS5 366)ZJJ B6P)XV4 J6D)TM5 6NP)Z8B 4XV)53H 4B3)SWL 1VL)CJJ F2V)5NN XBJ)DDN B3G)W3J 7TG)KZY 4V7)VNK W9D)9YC 4J1)VZ6 M5Z)94G Y1Q)DV4 KZY)ZLJ 7KF)TSB GKH)JVC FLB)1SN DRY)8PS WT9)T5H 69Y)8G3 7G4)S11 QQF)QM9 8FJ)1BK HSL)TFP LHG)LZY VJB)2WJ XSL)GX8 P74)XR9 2V1)52T WGH)69L L1Z)J98 VNV)HCZ NG6)NLF RBR)X4J X18)35P LBS)HK3 7TM)NG6 1RD)25R 6BX)29J BNH)VF1 QXV)797 M1R)X6D 3R3)6CF 7D5)1WY MHQ)B6P MW3)XZK G3W)LP6 16C)NLD 9ZB)SXQ 2MX)K5Z 3Z2)7K2 JLP)CL7 17K)VXQ FFB)G91 RFC)48L TMP)9HZ T6S)Y79 DVP)283 CHL)QD6 ZJJ)LFR R2F)N85 HT7)KWN 3YX)W4Y BGL)K74 5T3)287 Z1L)ZNQ C28)MW3 385)MNS GGC)6FJ YRQ)8T1 5F6)Z4L 8TY)5R9 LC8)132 688)BHB 55P)TDH K74)GTZ VZX)714 N1X)2RG MMF)26B DV4)G4G R9X)Z78 RVH)B66 LSZ)XR5 TC1)6XK 98Y)LQJ 83D)BWG NC8)D3L BDT)6GR SH4)SKD 7SQ)T1S NKF)87M 5KN)FFX DFH)TC1 8T2)F17 D8Y)5H7 C34)H1V HM1)ZZN N25)T66 3VW)GNH RL1)N1X YN6)5F6 GKD)1JZ 18F)JLP PQJ)6TL Z78)MTV BBM)ZMY B1G)Y88 JC9)NKF QNS)7DR 463)8MJ 3MR)GPX ZXW)PLD BF9)7G4 ZKY)Z5L QGR)MWJ NSN)SWD C5V)3Z2 VDX)M3Z ZR9)K7F 2BM)RPC GYH)QY8 JBB)6QK G9N)B77 RPC)M9B F84)B1L 1JZ)G95 SND)8G4 D1Q)J6D N9N)LNM YZH)V8R TJ4)ZVD 2V1)BGZ];

memory = {}
class Node
  attr_accessor :parent, :children

  def initialize()
    @parent = nil
    @children = []
  end
end

input.each do |orbit|
  parent_name, child_name = orbit.split(')')
  parent = memory[parent_name] || Node.new()
  child = memory[child_name] || Node.new()

  parent.children << child
  child.parent = parent
  memory[parent_name] ||= parent
  memory[child_name] ||= child
end;

root = 'COM'
node = memory[root];

@total = 0
def visit(node, distance = 0)
  node.children.each { |child| visit(child, distance + 1) }
  @total += distance
end
visit(node)

# part 2
class Node
  attr_accessor :parent, :children, :visited

  def initialize()
    @parent = nil
    @children = []
    @visited = false
  end
end


node = memory['YOU'];
@destination = memory['SAN'];

memory.values.each { |n| n.visited = false };
def find_shortest(node, distance = 0)
  node.visited = true
  if node == @destination
    puts distance
    return distance
  end
  nodes = [*node.children, node.parent].compact
  nodes = nodes.reject { |n| n.visited }
  if nodes.empty?
    Float::INFINITY
  else
    nodes.map { |n| find_shortest(n, distance + 1) }.min
  end
end

find_shortest(node) - 2


# Day 8
# part 1

input

image_x = 25
image_y = 6
l = input.chars.each_slice(image_x * image_y).map do |layer|
  { zeros: layer.count('0'), ones: layer.count('1'), twos: layer.count('2') }
end.min_by { |layer| layer[:zeros] }
l[:ones] * l[:twos]

# part 2
chars = input.chars;

image = Array.new(image_x) { Array.new(image_y) { '2' } };

chars.each_slice(image_x * image_y) do |layer|
  image_y.times do |y|
    image_x.times do |x|
      i = x + (image_x * y)
      pixel = layer[i]
      image[x][y] = pixel if image[x][y] == '2' && pixel != '2'
    end
  end;
end

image_y.times do |y|
  image_x.times do |x|
    point = image[x][y]
    if point != '1'
      print '.'
    else print point
    end
  end
  puts ''
end;


# Day 10
# part 1
input = %w[##.##..#.####...#.#.#### ##.###..##.#######..##.. ..######.###.#.##.###### .#######.####.##.#.###.# ..#...##.#.....#####..## #..###.#...#..###.#..#.. ###..#.##.####.#..##..## .##.##....###.#..#....#. ########..#####..####### ##..#..##.#..##.#.#.#..# ##.#.##.######.#####.... ###.##...#.##...#.###### ###...##.####..##..##### ##.#...#.#.....######.## .#...####..####.##...##. #.#########..###..#.#### #.##..###.#.######.##### ##..##.##...####.#...##. ###...###.##.####.#.##.. ####.#.....###..#.####.# ##.####..##.#.##..##.#.# #####..#...####..##..#.# .##.##.##...###.##...### ..###.########.#.###..#.];
map = input.map(&:chars);

def rational(numerator, denominator)
  Rational(numerator, denominator)
rescue ZeroDivisionError
  Float::INFINITY
end

max = 0
location = []

map.each_with_index do |line, y|
  line.each_with_index do |space, x|
    next unless space == '#'

    total = 0
    seen = {}
    0.upto(map.length - 1) do |scan_y|
      (0).upto(map.first.length - 1) do |scan_x|
        if x == scan_x && y == scan_y
          total += seen.length
          seen = {}
          next
        end
        next unless map[scan_y][scan_x] == '#'
        seen[rational(scan_x - x, scan_y - y)] ||= [scan_x, scan_y]
      end
    end
    total += seen.length
    if total > max
      max = total
      location = [x, y]
    end
  end
end;

# part 2
# map = %w[.#....#####...#.. ##...##.#####..## ##...#...#.#####. ..#.....#...###.. ..#.#.....#....##].map(&:chars);
# station_x = 8
# station_y = 3

map = input.map(&:chars);
station_x = 14
station_y = 17
vaporize_count = 0

loop do
  seen = {}
  first_seen = nil
  0.upto(map.length - 1) do |scan_y|
    (0).upto(map.first.length - 1) do |scan_x|
      if scan_x == station_x && scan_y == station_y
        first_seen = seen.dup
        seen = {}
        next
      end
      next unless map[scan_y][scan_x] == '#'
      slope = rational(scan_x - station_x, scan_y - station_y)
      curr_x_dist = (scan_x - station_x).abs
      curr_y_dist = (scan_y - station_y).abs
      past_x_dist = seen[slope] && (seen[slope].first - station_x).abs
      past_y_dist = seen[slope] && (seen[slope].last - station_y).abs
      if !seen[slope] || (past_x_dist + past_y_dist > curr_x_dist + curr_y_dist)
        seen[slope] = [scan_x, scan_y]
      end
    end
  end
  first_sweep, last_sweep = first_seen.sort_by { |k, v| -k }.partition { |k, v| !k.positive? }.map(&:to_h)
  to_vaporize = first_sweep.values + seen.sort_by { |k, v| -k }.to_h.values + last_sweep.values
  to_vaporize.each do |x, y|
    vaporize_count += 1
    p [x, y] if vaporize_count == 200
    map[y][x] = '.'
  end
end


# Day 12
# part 1
moons = [
  { pos: { x: -15, y: 1, z: 4 }, vel: { x: 0, y: 0, z: 0 } },
  { pos: { x: 1, y: -10, z: -8 }, vel: { x: 0, y: 0, z: 0 } },
  { pos: { x: -5, y: 4, z: 9 }, vel: { x: 0, y: 0, z: 0 } },
  { pos: { x: 4, y: 6, z: -2 }, vel: { x: 0, y: 0, z: 0 } }
]

# moons =[
#    { pos: { x:-1, y:  0, z: 2}, vel: { x: 0, y: 0, z: 0 } },
#    { pos: { x: 2, y:-10, z:-7}, vel: { x: 0, y: 0, z: 0 } },
#    { pos: { x: 4, y: -8, z: 8}, vel: { x: 0, y: 0, z: 0 } },
#    { pos: { x: 3, y:  5, z:-1}, vel: { x: 0, y: 0, z: 0 } },
# ]

1000.times do
  moons.each do |moon|
    %i(x y z).each do |dir|
      vel_change = moons.sum do |other_moon|
        other_moon.dig(:pos, dir) <=> moon.dig(:pos, dir)
      end
      moon[:vel][dir] += vel_change
    end
  end
  moons.each { |moon| %i(x y z).each { |dir| moon[:pos][dir] += moon[:vel][dir] } }
end

moons.sum do |moon|
  potential = %i(x y z).sum { |dir| moon[:pos][dir].abs }
  kinetic = %i(x y z).sum { |dir| moon[:vel][dir].abs }
  potential * kinetic
end

# part 2

moons = [
  { pos: { x: -15, y: 1, z: 4 }, vel: { x: 0, y: 0, z: 0 } },
  { pos: { x: 1, y: -10, z: -8 }, vel: { x: 0, y: 0, z: 0 } },
  { pos: { x: -5, y: 4, z: 9 }, vel: { x: 0, y: 0, z: 0 } },
  { pos: { x: 4, y: 6, z: -2 }, vel: { x: 0, y: 0, z: 0 } }
]
found_x = nil
found_y = nil
found_z = nil

1.step do |i|
  puts i if i % 10_000 == 0
  moons.each do |moon|
    %i(x y z).each do |dir|
      vel_change = moons.sum do |other_moon|
        other_moon.dig(:pos, dir) <=> moon.dig(:pos, dir)
      end
      moon[:vel][dir] += vel_change
    end
  end
  moons.each { |moon| %i(x y z).each { |dir| moon[:pos][dir] += moon[:vel][dir] } }

  state_x, state_y, state_z = %i(x y z).map do |dir|
    moons.map { |moon| [moon.dig(:pos, dir), moon.dig(:vel, dir)] }
  end

  found_x ||= i if state_x == [[-15, 0], [1, 0], [-5, 0], [4, 0]]
  found_y ||= i if state_y == [[1, 0], [-10, 0], [4, 0], [6, 0]]
  found_z ||= i if state_z == [[4, 0], [-8, 0], [9, 0], [-2, 0]]

  break i if found_x && found_y && found_z
end
[found_x, found_y, found_z].reduce(1, :lcm)


# Day 13
# part 1
require '/Users/rfauver/Desktop/advent2019-intcode.rb'

program = [1,380,379,385,1008,2531,381039,381,1005,381,12,99,109,2532,1101,0,0,383,1101,0,0,382,21002,382,1,1,21002,383,1,2,21101,0,37,0,1106,0,578,4,382,4,383,204,1,1001,382,1,382,1007,382,43,381,1005,381,22,1001,383,1,383,1007,383,22,381,1005,381,18,1006,385,69,99,104,-1,104,0,4,386,3,384,1007,384,0,381,1005,381,94,107,0,384,381,1005,381,108,1106,0,161,107,1,392,381,1006,381,161,1101,-1,0,384,1105,1,119,1007,392,41,381,1006,381,161,1102,1,1,384,20101,0,392,1,21102,20,1,2,21101,0,0,3,21101,138,0,0,1106,0,549,1,392,384,392,20102,1,392,1,21102,20,1,2,21102,1,3,3,21101,0,161,0,1105,1,549,1101,0,0,384,20001,388,390,1,21001,389,0,2,21102,180,1,0,1105,1,578,1206,1,213,1208,1,2,381,1006,381,205,20001,388,390,1,20101,0,389,2,21101,205,0,0,1106,0,393,1002,390,-1,390,1102,1,1,384,20101,0,388,1,20001,389,391,2,21101,0,228,0,1106,0,578,1206,1,261,1208,1,2,381,1006,381,253,21001,388,0,1,20001,389,391,2,21102,253,1,0,1106,0,393,1002,391,-1,391,1101,0,1,384,1005,384,161,20001,388,390,1,20001,389,391,2,21101,0,279,0,1105,1,578,1206,1,316,1208,1,2,381,1006,381,304,20001,388,390,1,20001,389,391,2,21101,304,0,0,1106,0,393,1002,390,-1,390,1002,391,-1,391,1101,0,1,384,1005,384,161,21002,388,1,1,21002,389,1,2,21101,0,0,3,21102,1,338,0,1106,0,549,1,388,390,388,1,389,391,389,21002,388,1,1,20101,0,389,2,21101,4,0,3,21102,1,365,0,1106,0,549,1007,389,21,381,1005,381,75,104,-1,104,0,104,0,99,0,1,0,0,0,0,0,0,291,19,17,1,1,21,109,3,22101,0,-2,1,21202,-1,1,2,21102,0,1,3,21102,1,414,0,1105,1,549,22102,1,-2,1,22101,0,-1,2,21102,1,429,0,1106,0,601,1202,1,1,435,1,386,0,386,104,-1,104,0,4,386,1001,387,-1,387,1005,387,451,99,109,-3,2106,0,0,109,8,22202,-7,-6,-3,22201,-3,-5,-3,21202,-4,64,-2,2207,-3,-2,381,1005,381,492,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,481,21202,-4,8,-2,2207,-3,-2,381,1005,381,518,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,507,2207,-3,-4,381,1005,381,540,21202,-4,-1,-1,22201,-3,-1,-3,2207,-3,-4,381,1006,381,529,22101,0,-3,-7,109,-8,2106,0,0,109,4,1202,-2,43,566,201,-3,566,566,101,639,566,566,1202,-1,1,0,204,-3,204,-2,204,-1,109,-4,2106,0,0,109,3,1202,-1,43,593,201,-2,593,593,101,639,593,593,21002,0,1,-2,109,-3,2106,0,0,109,3,22102,22,-2,1,22201,1,-1,1,21102,479,1,2,21101,0,201,3,21101,946,0,4,21102,630,1,0,1105,1,456,21201,1,1585,-2,109,-3,2106,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,2,2,0,2,0,2,2,2,0,2,0,2,2,2,2,0,0,0,2,2,0,2,2,0,0,2,0,2,2,0,2,2,2,2,2,0,1,1,0,2,0,2,2,2,2,2,2,0,2,2,0,2,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,2,0,2,0,2,0,0,0,0,0,0,1,1,0,2,2,0,2,0,0,0,2,2,0,2,0,0,0,2,0,0,0,0,2,2,2,0,2,0,0,0,2,0,2,2,0,0,2,0,2,0,2,2,0,1,1,0,0,2,0,2,0,0,2,2,2,2,2,0,2,0,2,2,0,0,0,2,2,0,0,2,2,0,2,2,2,0,0,2,0,2,0,2,0,0,2,0,1,1,0,2,0,2,0,2,2,2,0,0,0,0,0,0,2,0,2,0,0,2,0,2,0,0,2,0,0,0,0,2,2,0,2,2,0,0,2,0,0,0,0,1,1,0,0,0,2,2,2,2,0,2,2,2,2,0,2,0,0,2,2,0,2,2,2,0,0,0,2,2,0,0,2,2,0,0,0,0,2,2,0,0,2,0,1,1,0,0,0,0,0,0,2,2,2,2,2,2,0,0,2,2,0,0,2,2,2,0,0,2,2,2,0,2,0,2,0,0,2,0,2,2,2,0,2,0,0,1,1,0,2,0,0,0,0,2,2,2,0,0,2,0,0,2,0,2,2,2,2,0,2,0,2,0,0,0,0,2,0,2,2,0,2,2,0,2,2,0,2,0,1,1,0,0,2,2,0,2,2,0,2,0,2,0,2,0,2,0,0,0,0,2,2,2,2,0,2,0,2,2,0,2,0,2,2,0,2,2,0,2,2,0,0,1,1,0,0,2,0,0,2,2,2,0,2,0,0,2,2,0,2,2,0,0,0,2,2,0,2,2,2,0,0,2,0,0,0,0,2,2,2,0,0,0,2,0,1,1,0,0,2,2,0,0,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,2,0,2,2,0,2,2,0,2,0,2,2,0,2,2,0,2,2,2,0,1,1,0,0,0,2,2,2,0,2,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,0,0,2,0,0,0,0,2,2,0,2,2,0,1,1,0,2,0,0,2,2,0,2,0,0,0,2,2,2,2,2,2,0,2,2,0,2,0,2,2,0,2,2,0,2,2,2,2,2,0,0,2,0,0,0,0,1,1,0,2,0,0,2,0,2,0,0,2,0,0,2,2,2,2,2,0,2,0,2,2,0,2,2,0,0,2,2,0,0,0,2,2,0,2,2,0,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,37,59,35,82,55,63,50,72,81,61,59,5,1,69,3,36,79,19,94,73,56,24,20,10,1,25,20,49,14,41,74,10,1,48,97,35,54,11,81,35,36,54,58,49,82,25,96,37,51,26,65,35,51,78,95,58,66,62,83,44,62,53,19,35,90,77,50,38,53,16,24,10,59,72,21,24,91,15,80,80,83,67,27,51,49,31,38,51,10,47,22,68,71,30,19,57,64,6,63,91,63,34,53,95,87,27,83,15,5,2,22,23,34,80,75,27,15,88,73,28,23,4,85,54,68,43,55,31,81,78,16,88,75,85,8,9,27,82,95,34,86,94,31,33,42,94,26,98,73,73,74,89,43,1,55,63,21,93,97,18,57,41,66,83,32,13,67,23,80,22,95,8,68,26,8,76,22,10,53,56,76,11,82,77,83,31,43,49,45,19,72,13,7,21,40,58,94,67,16,84,38,11,62,22,56,5,2,42,2,38,37,83,3,74,9,4,52,91,38,45,31,60,81,52,19,7,54,49,64,73,26,11,38,84,49,79,48,92,48,28,88,71,8,66,86,44,90,21,73,33,15,5,34,34,30,66,29,13,59,30,7,52,59,77,71,4,42,28,73,50,40,77,33,18,66,5,36,49,98,48,29,32,21,10,18,2,79,44,67,19,26,64,27,92,29,3,19,67,73,44,41,49,45,34,61,65,97,56,4,44,85,38,19,43,61,10,97,44,3,93,86,71,36,52,95,36,13,28,53,2,79,66,92,38,8,92,47,40,78,51,67,22,42,76,49,41,23,47,49,87,81,26,11,20,17,11,93,64,78,63,29,80,54,20,62,45,78,38,6,14,14,62,86,10,17,77,60,20,77,42,6,68,28,62,37,44,17,85,16,33,55,85,11,35,2,8,3,88,4,67,16,97,51,40,72,70,45,28,36,47,48,95,60,77,63,1,31,54,52,18,25,46,39,58,86,26,75,48,85,34,56,93,16,98,36,24,61,63,90,32,93,16,53,48,74,73,95,43,81,55,85,29,32,91,34,4,14,3,24,41,44,64,7,78,19,17,75,71,16,22,75,78,89,93,12,90,54,38,61,3,54,61,69,58,17,27,46,75,19,13,46,53,33,87,25,65,67,22,50,90,53,98,11,54,52,57,4,49,92,73,26,70,43,12,7,70,7,58,13,8,27,12,20,86,45,3,98,56,66,58,47,52,87,79,31,37,48,56,46,26,50,75,1,24,96,67,94,11,56,57,7,58,2,21,57,40,64,73,81,13,58,68,45,32,55,13,91,43,59,62,34,28,44,35,68,35,70,1,78,77,69,3,38,11,63,12,56,13,20,82,58,59,22,69,34,82,80,86,15,30,92,39,49,75,27,83,59,89,35,86,19,26,18,50,9,91,82,4,63,57,22,96,54,72,3,76,8,19,24,81,92,76,86,48,70,72,72,75,97,36,95,44,53,40,81,81,33,7,55,58,23,13,24,16,24,67,88,13,32,98,62,71,49,72,52,34,9,61,78,33,72,38,30,35,17,66,35,81,79,62,45,64,11,67,69,49,33,91,74,24,21,36,84,14,75,87,21,57,88,79,70,74,62,4,45,35,76,1,84,74,59,25,3,88,38,34,97,82,31,17,56,95,40,21,77,9,4,1,40,68,60,26,45,55,17,51,7,34,82,27,82,24,72,84,42,72,23,11,48,42,51,22,49,9,80,31,51,39,15,64,44,40,36,67,97,70,39,48,71,75,12,62,11,22,19,80,78,11,58,98,98,69,3,6,14,29,41,10,76,27,5,58,18,22,73,80,34,53,51,87,5,31,13,82,34,10,59,20,10,39,89,12,59,84,31,66,73,7,19,69,86,85,2,34,20,87,28,98,19,50,74,95,69,87,63,63,67,11,47,56,38,9,28,25,46,69,28,63,95,65,83,41,19,78,50,96,77,52,84,37,71,92,51,92,35,97,46,17,71,43,58,54,26,38,9,90,56,9,55,85,52,63,20,8,63,23,24,63,81,22,86,11,90,74,23,19,52,53,22,52,15,85,13,37,52,69,36,10,68,20,54,77,35,15,17,46,88,38,57,69,15,38,60,70,40,17,12,79,33,17,88,90,72,2,62,23,91,41,18,56,22,38,35,37,11,23,381039];
comp = Intcode.new(program);
response = {}
screen = Array.new(22) { Array.new(43) { 0 } };

until response[:status] == :halted
  response = comp.run
  break if response[:status] == :halted
  x = response[:output]
  break if response[:status] == :halted
  response = comp.run
  break if response[:status] == :halted
  y = response[:output]
  response = comp.run
  id = response[:output]
  screen[y][x] = id
end

screen.sum { |row| row.select { |pixel| pixel == 2 }.count }

# part 2
program = [2,380,379,385,1008,2531,381039,381,1005,381,12,99,109,2532,1101,0,0,383,1101,0,0,382,21002,382,1,1,21002,383,1,2,21101,0,37,0,1106,0,578,4,382,4,383,204,1,1001,382,1,382,1007,382,43,381,1005,381,22,1001,383,1,383,1007,383,22,381,1005,381,18,1006,385,69,99,104,-1,104,0,4,386,3,384,1007,384,0,381,1005,381,94,107,0,384,381,1005,381,108,1106,0,161,107,1,392,381,1006,381,161,1101,-1,0,384,1105,1,119,1007,392,41,381,1006,381,161,1102,1,1,384,20101,0,392,1,21102,20,1,2,21101,0,0,3,21101,138,0,0,1106,0,549,1,392,384,392,20102,1,392,1,21102,20,1,2,21102,1,3,3,21101,0,161,0,1105,1,549,1101,0,0,384,20001,388,390,1,21001,389,0,2,21102,180,1,0,1105,1,578,1206,1,213,1208,1,2,381,1006,381,205,20001,388,390,1,20101,0,389,2,21101,205,0,0,1106,0,393,1002,390,-1,390,1102,1,1,384,20101,0,388,1,20001,389,391,2,21101,0,228,0,1106,0,578,1206,1,261,1208,1,2,381,1006,381,253,21001,388,0,1,20001,389,391,2,21102,253,1,0,1106,0,393,1002,391,-1,391,1101,0,1,384,1005,384,161,20001,388,390,1,20001,389,391,2,21101,0,279,0,1105,1,578,1206,1,316,1208,1,2,381,1006,381,304,20001,388,390,1,20001,389,391,2,21101,304,0,0,1106,0,393,1002,390,-1,390,1002,391,-1,391,1101,0,1,384,1005,384,161,21002,388,1,1,21002,389,1,2,21101,0,0,3,21102,1,338,0,1106,0,549,1,388,390,388,1,389,391,389,21002,388,1,1,20101,0,389,2,21101,4,0,3,21102,1,365,0,1106,0,549,1007,389,21,381,1005,381,75,104,-1,104,0,104,0,99,0,1,0,0,0,0,0,0,291,19,17,1,1,21,109,3,22101,0,-2,1,21202,-1,1,2,21102,0,1,3,21102,1,414,0,1105,1,549,22102,1,-2,1,22101,0,-1,2,21102,1,429,0,1106,0,601,1202,1,1,435,1,386,0,386,104,-1,104,0,4,386,1001,387,-1,387,1005,387,451,99,109,-3,2106,0,0,109,8,22202,-7,-6,-3,22201,-3,-5,-3,21202,-4,64,-2,2207,-3,-2,381,1005,381,492,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,481,21202,-4,8,-2,2207,-3,-2,381,1005,381,518,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,507,2207,-3,-4,381,1005,381,540,21202,-4,-1,-1,22201,-3,-1,-3,2207,-3,-4,381,1006,381,529,22101,0,-3,-7,109,-8,2106,0,0,109,4,1202,-2,43,566,201,-3,566,566,101,639,566,566,1202,-1,1,0,204,-3,204,-2,204,-1,109,-4,2106,0,0,109,3,1202,-1,43,593,201,-2,593,593,101,639,593,593,21002,0,1,-2,109,-3,2106,0,0,109,3,22102,22,-2,1,22201,1,-1,1,21102,479,1,2,21101,0,201,3,21101,946,0,4,21102,630,1,0,1105,1,456,21201,1,1585,-2,109,-3,2106,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,2,2,0,2,0,2,2,2,0,2,0,2,2,2,2,0,0,0,2,2,0,2,2,0,0,2,0,2,2,0,2,2,2,2,2,0,1,1,0,2,0,2,2,2,2,2,2,0,2,2,0,2,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,2,0,2,0,2,0,0,0,0,0,0,1,1,0,2,2,0,2,0,0,0,2,2,0,2,0,0,0,2,0,0,0,0,2,2,2,0,2,0,0,0,2,0,2,2,0,0,2,0,2,0,2,2,0,1,1,0,0,2,0,2,0,0,2,2,2,2,2,0,2,0,2,2,0,0,0,2,2,0,0,2,2,0,2,2,2,0,0,2,0,2,0,2,0,0,2,0,1,1,0,2,0,2,0,2,2,2,0,0,0,0,0,0,2,0,2,0,0,2,0,2,0,0,2,0,0,0,0,2,2,0,2,2,0,0,2,0,0,0,0,1,1,0,0,0,2,2,2,2,0,2,2,2,2,0,2,0,0,2,2,0,2,2,2,0,0,0,2,2,0,0,2,2,0,0,0,0,2,2,0,0,2,0,1,1,0,0,0,0,0,0,2,2,2,2,2,2,0,0,2,2,0,0,2,2,2,0,0,2,2,2,0,2,0,2,0,0,2,0,2,2,2,0,2,0,0,1,1,0,2,0,0,0,0,2,2,2,0,0,2,0,0,2,0,2,2,2,2,0,2,0,2,0,0,0,0,2,0,2,2,0,2,2,0,2,2,0,2,0,1,1,0,0,2,2,0,2,2,0,2,0,2,0,2,0,2,0,0,0,0,2,2,2,2,0,2,0,2,2,0,2,0,2,2,0,2,2,0,2,2,0,0,1,1,0,0,2,0,0,2,2,2,0,2,0,0,2,2,0,2,2,0,0,0,2,2,0,2,2,2,0,0,2,0,0,0,0,2,2,2,0,0,0,2,0,1,1,0,0,2,2,0,0,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,2,0,2,2,0,2,2,0,2,0,2,2,0,2,2,0,2,2,2,0,1,1,0,0,0,2,2,2,0,2,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,0,0,2,0,0,0,0,2,2,0,2,2,0,1,1,0,2,0,0,2,2,0,2,0,0,0,2,2,2,2,2,2,0,2,2,0,2,0,2,2,0,2,2,0,2,2,2,2,2,0,0,2,0,0,0,0,1,1,0,2,0,0,2,0,2,0,0,2,0,0,2,2,2,2,2,0,2,0,2,2,0,2,2,0,0,2,2,0,0,0,2,2,0,2,2,0,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,37,59,35,82,55,63,50,72,81,61,59,5,1,69,3,36,79,19,94,73,56,24,20,10,1,25,20,49,14,41,74,10,1,48,97,35,54,11,81,35,36,54,58,49,82,25,96,37,51,26,65,35,51,78,95,58,66,62,83,44,62,53,19,35,90,77,50,38,53,16,24,10,59,72,21,24,91,15,80,80,83,67,27,51,49,31,38,51,10,47,22,68,71,30,19,57,64,6,63,91,63,34,53,95,87,27,83,15,5,2,22,23,34,80,75,27,15,88,73,28,23,4,85,54,68,43,55,31,81,78,16,88,75,85,8,9,27,82,95,34,86,94,31,33,42,94,26,98,73,73,74,89,43,1,55,63,21,93,97,18,57,41,66,83,32,13,67,23,80,22,95,8,68,26,8,76,22,10,53,56,76,11,82,77,83,31,43,49,45,19,72,13,7,21,40,58,94,67,16,84,38,11,62,22,56,5,2,42,2,38,37,83,3,74,9,4,52,91,38,45,31,60,81,52,19,7,54,49,64,73,26,11,38,84,49,79,48,92,48,28,88,71,8,66,86,44,90,21,73,33,15,5,34,34,30,66,29,13,59,30,7,52,59,77,71,4,42,28,73,50,40,77,33,18,66,5,36,49,98,48,29,32,21,10,18,2,79,44,67,19,26,64,27,92,29,3,19,67,73,44,41,49,45,34,61,65,97,56,4,44,85,38,19,43,61,10,97,44,3,93,86,71,36,52,95,36,13,28,53,2,79,66,92,38,8,92,47,40,78,51,67,22,42,76,49,41,23,47,49,87,81,26,11,20,17,11,93,64,78,63,29,80,54,20,62,45,78,38,6,14,14,62,86,10,17,77,60,20,77,42,6,68,28,62,37,44,17,85,16,33,55,85,11,35,2,8,3,88,4,67,16,97,51,40,72,70,45,28,36,47,48,95,60,77,63,1,31,54,52,18,25,46,39,58,86,26,75,48,85,34,56,93,16,98,36,24,61,63,90,32,93,16,53,48,74,73,95,43,81,55,85,29,32,91,34,4,14,3,24,41,44,64,7,78,19,17,75,71,16,22,75,78,89,93,12,90,54,38,61,3,54,61,69,58,17,27,46,75,19,13,46,53,33,87,25,65,67,22,50,90,53,98,11,54,52,57,4,49,92,73,26,70,43,12,7,70,7,58,13,8,27,12,20,86,45,3,98,56,66,58,47,52,87,79,31,37,48,56,46,26,50,75,1,24,96,67,94,11,56,57,7,58,2,21,57,40,64,73,81,13,58,68,45,32,55,13,91,43,59,62,34,28,44,35,68,35,70,1,78,77,69,3,38,11,63,12,56,13,20,82,58,59,22,69,34,82,80,86,15,30,92,39,49,75,27,83,59,89,35,86,19,26,18,50,9,91,82,4,63,57,22,96,54,72,3,76,8,19,24,81,92,76,86,48,70,72,72,75,97,36,95,44,53,40,81,81,33,7,55,58,23,13,24,16,24,67,88,13,32,98,62,71,49,72,52,34,9,61,78,33,72,38,30,35,17,66,35,81,79,62,45,64,11,67,69,49,33,91,74,24,21,36,84,14,75,87,21,57,88,79,70,74,62,4,45,35,76,1,84,74,59,25,3,88,38,34,97,82,31,17,56,95,40,21,77,9,4,1,40,68,60,26,45,55,17,51,7,34,82,27,82,24,72,84,42,72,23,11,48,42,51,22,49,9,80,31,51,39,15,64,44,40,36,67,97,70,39,48,71,75,12,62,11,22,19,80,78,11,58,98,98,69,3,6,14,29,41,10,76,27,5,58,18,22,73,80,34,53,51,87,5,31,13,82,34,10,59,20,10,39,89,12,59,84,31,66,73,7,19,69,86,85,2,34,20,87,28,98,19,50,74,95,69,87,63,63,67,11,47,56,38,9,28,25,46,69,28,63,95,65,83,41,19,78,50,96,77,52,84,37,71,92,51,92,35,97,46,17,71,43,58,54,26,38,9,90,56,9,55,85,52,63,20,8,63,23,24,63,81,22,86,11,90,74,23,19,52,53,22,52,15,85,13,37,52,69,36,10,68,20,54,77,35,15,17,46,88,38,57,69,15,38,60,70,40,17,12,79,33,17,88,90,72,2,62,23,91,41,18,56,22,38,35,37,11,23,381039];

@get_input = lambda {
  puts @score
  @screen.each do |row|
    row.each do |pixel|
      case pixel
      when 0 then print ' '
      when 1 then print '#'
      when 2 then print 'B'
      when 3 then print '_'
      when 4 then print 'O'
      end
    end
    puts
  end;

  STDIN.getch
  STDIN.getch
  case STDIN.getch
  when 'D' then -1
  when 'C' then 1
  else 0
  end
}

comp = Intcode.new(program);
response = {}
@screen = Array.new(22) { Array.new(43) { 0 } };
@score = 0
until response[:status] == :halted
  response = comp.run { @get_input.call }
  break if response[:status] == :halted
  x = response[:output]
  break if response[:status] == :halted
  response = comp.run { @get_input.call }
  break if response[:status] == :halted
  y = response[:output]
  response = comp.run { @get_input.call }
  id = response[:output]
  if x == -1 && y == 0
    @score = id
    next
  end
  @screen[y][x] = id
end


# Day 14
# part 1

input = {ZJZRN:{produced:5,takes:{HKCVW:1,DFCT:2}},ZKCXK:{produced:8,takes:{TCPN:8,XHTJF:7,DFCT:3}},ZWQX:{produced:5,takes:{ZJZRN:1,NZVL:4,NJFXK:1,RHJCQ:7,MCQS:32,XFNPT:1}},TCPN:{produced:6,takes:{DRWB:10,JBHKV:16}},DRWB:{produced:7,takes:{MBFK:3}},MBMKZ:{produced:6,takes:{RHJCQ:9}},KRTGD:{produced:2,takes:{BVFPF:1}},VNFJQ:{produced:4,takes:{QNXC:1,BKNQT:7,XFNPT:1}},TGJP:{produced:2,takes:{TCPN:2,WFSV:1}},RHJCQ:{produced:2,takes:{DFCT:35}},QGDSV:{produced:8,takes:{SKBV:1,CTRH:7}},CTRH:{produced:4,takes:{VSRMJ:8,BVFPF:1}},FPZLF:{produced:3,takes:{WMCD:1}},QBDQ:{produced:9,takes:{CVJQG:13,DXBZJ:8}},GDJGV:{produced:5,takes:{XSRWM:1}},MBFK:{produced:3,takes:{ORE:132}},LZKJZ:{produced:9,takes:{BQGP:2}},WFSV:{produced:7,takes:{GZLHP:5}},GZLHP:{produced:2,takes:{RXSZS:2,MBFK:10,BPNVK:1}},XSRWM:{produced:8,takes:{BZFH:13}},SKBV:{produced:3,takes:{QLSVN:3}},VSRMJ:{produced:4,takes:{QBDQ:8}},CVJQG:{produced:9,takes:{RXSZS:1}},BVFPF:{produced:3,takes:{MBFK:3}},XHTJF:{produced:8,takes:{GZLHP:7,MBFK:4,CVJQG:5}},DFCT:{produced:2,takes:{GZLHP:1}},RGZDK:{produced:3,takes:{SZDWB:4,RHJCQ:4,WMCD:1}},DXBZJ:{produced:8,takes:{BRXLV:2}},RXSZS:{produced:7,takes:{ORE:192}},SZDWB:{produced:5,takes:{PRMR:1,DFCT:6}},BPNVK:{produced:9,takes:{ORE:104}},RBFX:{produced:4,takes:{VLJWQ:6,ZKCXK:8,BKNQT:6,JRXQ:26,FPZLF:7,HKCVW:6,KRTGD:18}},HJDB:{produced:2,takes:{XFNPT:7,GDJGV:1}},GHQPH:{produced:3,takes:{SKBV:15,DRWB:8,RXSZS:12}},GCBR:{produced:5,takes:{BZFH:1}},BZFH:{produced:1,takes:{TGJP:1,SKBV:6}},TFQH:{produced:8,takes:{KRTGD:4,ZJHKP:1,LZKJZ:1,VNFJQ:1,QBDQ:6,PRMR:1,NJFXK:1,HJDB:1}},QNXC:{produced:8,takes:{BVFPF:10,RGZDK:1}},JRXQ:{produced:5,takes:{XHTJF:1}},ZJHKP:{produced:3,takes:{XKTMK:3,QGDSV:4}},PRMR:{produced:7,takes:{BZFH:2}},JBHKV:{produced:5,takes:{BPNVK:1,RXSZS:1}},BKNQT:{produced:9,takes:{XHTJF:10}},QLSVN:{produced:8,takes:{JBHKV:1,XHTJF:2}},FUEL:{produced:1,takes:{VNFJQ:24,TFQH:42,RBFX:39,ZWQX:1,VBHVQ:7,DRWB:26,NJFXK:21}},BQGP:{produced:5,takes:{WBKQ:26,XHTJF:14}},LQGC:{produced:3,takes:{WBKQ:5,MBMKZ:7}},NZVL:{produced:5,takes:{LQGC:6}},VLJWQ:{produced:9,takes:{KRTGD:13,GHQPH:5}},BRXLV:{produced:4,takes:{ORE:117}},MCQS:{produced:2,takes:{XKTMK:3,PRMR:1}},NJFXK:{produced:7,takes:{DRWB:3,BVFPF:7,TCPN:4}},XKTMK:{produced:5,takes:{VHFCR:10,JZQJ:13}},HKCVW:{produced:9,takes:{CVJQG:17,GCBR:4}},WBKQ:{produced:2,takes:{DFCT:22,TGJP:17}},VBHVQ:{produced:2,takes:{JZQJ:2,XFNPT:12,BQGP:1}},JZQJ:{produced:1,takes:{HKCVW:12}},WMCD:{produced:3,takes:{XSRWM:1}},XFNPT:{produced:4,takes:{BZFH:12,SKBV:14,CTRH:1}},VHFCR:{produced:6,takes:{ZKCXK:7}}};

@ingredients = input;

@have = {}
def count_ore(start: :FUEL, needed: 1)
  recipe = @ingredients[start]

  already_have = @have[start] || 0
  if needed >= already_have # 3  >=  2
    needed -= already_have # 1
    @have[start] = 0
  else
    @have[start] = already_have - needed
    needed = 0
  end

  multiple = (needed.to_f / recipe[:produced]).ceil

  @have[start] = (@have[start] || 0) + ((multiple * recipe[:produced]) - needed)

  recipe[:takes].map do |ingredient, needs|
    needs *= multiple
    # puts "To make #{needed} #{start} I need #{needs} #{ingredient}"

    if ingredient == :ORE
      needs
    else
      count_ore(start: ingredient, needed: needs)
    end
  end.sum
end

# part 2
@have = {}; count_ore(needed: 2876992)


# Day 15
# part 1
require '/Users/rfauver/Desktop/advent2019-intcode.rb'

program = [3,1033,1008,1033,1,1032,1005,1032,31,1008,1033,2,1032,1005,1032,58,1008,1033,3,1032,1005,1032,81,1008,1033,4,1032,1005,1032,104,99,102,1,1034,1039,1002,1036,1,1041,1001,1035,-1,1040,1008,1038,0,1043,102,-1,1043,1032,1,1037,1032,1042,1105,1,124,1001,1034,0,1039,101,0,1036,1041,1001,1035,1,1040,1008,1038,0,1043,1,1037,1038,1042,1106,0,124,1001,1034,-1,1039,1008,1036,0,1041,102,1,1035,1040,102,1,1038,1043,1002,1037,1,1042,1105,1,124,1001,1034,1,1039,1008,1036,0,1041,102,1,1035,1040,1001,1038,0,1043,102,1,1037,1042,1006,1039,217,1006,1040,217,1008,1039,40,1032,1005,1032,217,1008,1040,40,1032,1005,1032,217,1008,1039,35,1032,1006,1032,165,1008,1040,35,1032,1006,1032,165,1102,1,2,1044,1105,1,224,2,1041,1043,1032,1006,1032,179,1101,1,0,1044,1105,1,224,1,1041,1043,1032,1006,1032,217,1,1042,1043,1032,1001,1032,-1,1032,1002,1032,39,1032,1,1032,1039,1032,101,-1,1032,1032,101,252,1032,211,1007,0,35,1044,1106,0,224,1101,0,0,1044,1106,0,224,1006,1044,247,1002,1039,1,1034,102,1,1040,1035,101,0,1041,1036,1002,1043,1,1038,102,1,1042,1037,4,1044,1105,1,0,34,6,31,97,12,14,91,23,87,18,20,1,13,87,28,1,58,9,38,7,70,17,30,3,32,74,76,16,2,51,30,23,8,64,24,13,52,1,13,30,55,85,89,95,16,54,7,29,81,8,81,47,99,34,92,32,48,2,10,84,5,47,85,63,21,14,87,82,23,48,64,9,29,36,4,49,72,31,12,92,27,1,23,22,59,52,9,37,65,17,18,36,99,5,14,77,75,10,65,3,42,17,10,47,73,27,57,33,5,55,46,28,21,86,3,27,74,2,88,7,87,84,34,65,29,93,66,5,20,59,3,9,48,64,34,38,13,65,16,14,86,26,55,92,4,4,43,25,48,70,18,55,66,84,2,15,29,82,9,49,11,64,20,19,41,16,85,81,24,6,68,88,73,22,32,41,32,30,68,54,95,6,12,91,6,4,41,37,3,27,87,1,7,77,31,22,45,21,84,31,84,43,23,59,6,12,69,97,17,17,17,79,5,78,61,48,20,21,87,8,64,11,99,48,9,23,99,10,50,52,18,75,9,14,17,56,43,26,15,40,63,4,23,87,81,13,30,68,76,48,34,12,4,32,98,41,16,64,34,53,8,91,57,27,25,59,93,7,5,39,9,54,21,31,5,18,78,69,29,89,3,38,15,27,98,37,12,57,1,93,44,44,9,10,6,87,29,54,67,40,20,20,98,72,3,62,23,61,76,30,58,24,21,92,47,16,34,89,27,34,83,15,85,45,1,15,52,8,52,27,20,47,78,17,41,81,29,7,50,17,81,63,36,22,18,18,1,46,34,15,58,29,83,54,34,30,84,15,21,68,55,9,17,60,48,27,16,14,81,54,12,21,52,7,33,70,85,23,10,25,70,6,13,76,39,85,59,58,22,4,33,29,17,61,80,95,29,36,33,15,76,99,32,21,47,57,18,32,70,87,89,49,81,16,86,5,61,59,16,75,15,91,22,1,14,77,7,14,90,10,45,45,10,77,34,45,39,9,92,25,63,21,16,90,51,81,9,47,5,17,13,91,25,40,32,60,32,62,71,20,22,50,69,34,44,69,23,18,81,3,29,46,30,5,10,98,31,75,25,28,49,65,32,33,20,88,18,29,74,77,14,75,17,31,25,55,29,28,49,91,27,1,14,60,12,24,88,21,16,82,74,3,59,94,44,21,66,99,5,92,42,32,71,12,43,30,77,14,2,25,68,19,74,5,47,31,79,21,33,54,68,57,68,36,11,14,42,32,32,95,55,29,10,39,64,18,26,55,10,20,58,79,44,31,41,44,52,79,15,56,14,60,2,67,24,63,46,19,52,21,48,10,22,99,4,2,58,63,21,97,14,23,94,20,47,3,38,14,56,15,3,27,53,22,31,22,91,86,28,57,44,17,82,20,93,31,3,20,92,17,1,58,99,16,8,51,26,10,12,39,59,8,7,99,5,54,34,1,85,84,74,2,53,80,89,26,77,25,23,45,7,99,10,99,30,65,13,87,94,5,21,59,32,15,93,23,99,57,9,37,9,36,94,3,93,49,95,21,26,78,13,53,20,38,21,63,22,98,65,14,73,17,82,5,69,1,95,15,40,60,18,44,33,81,6,75,73,5,34,10,19,59,64,22,20,66,4,79,28,37,28,23,26,7,95,16,98,1,93,86,8,85,4,81,19,49,63,12,78,4,26,54,21,71,14,50,29,46,38,52,22,92,94,85,22,66,75,56,21,71,70,87,6,44,9,83,20,58,29,68,26,77,36,36,13,71,15,69,5,44,0,0,21,21,1,10,1,0,0,0,0,0,0];
def print_screen
  puts '----'
  min_x = @coords.keys.map { |coord| coord.first }.min || -1
  max_x = @coords.keys.map { |coord| coord.first }.max || 1
  min_y = @coords.keys.map { |coord| coord.last }.min || -1
  max_y = @coords.keys.map { |coord| coord.last }.max || 1

  min_y.upto(max_y) do |y|
    min_x.upto(max_x) do |x|
      if [x,y] == [@x,@y]
        print 'o'
        next
      end
      if [x,y] == [0,0]
        print 'x'
        next
      end
      print case @coords[[x,y]]
            when 0 then '█'
            when 2 then 'X'
            else '.'
            end
    end
    puts
  end
end

@get_input = lambda {
  print_screen
  STDIN.getch
  STDIN.getch
  case STDIN.getch
  when 'A'
    @y -= 1
    1
  when 'B'
    @y += 1
    2
  when 'D'
    @x -= 1
    3
  when 'C'
    @x += 1
    4
  end
}

@coords = {}

comp = Intcode.new(program.dup);
@x = 0
@y = 0
@last = [0,0]

distance = 0
visited = {}

loop do
  response = comp.run(&@get_input)
  output = response[:output]
  break if response[:status] == :halted
  @coords[[@x, @y]] = output
  case output
  when 0
    @x, @y = @last
  when 1
    if visited[[@x,@y]]
      distance -= 1
    else
      distance += 1
    end
    @last = [@x, @y]
  when 2
    @last = [@x, @y]
  else
    @last = [@x, @y]
  end
  visited[[@x,@y]] = true
end

# part 2
coords = {[0, 1]=>0, [1, 0]=>0, [0, -1]=>1, [-1, -1]=>0, [1, -1]=>0, [0, -2]=>1, [0, -3]=>0, [-1, -2]=>1, [-1, -3]=>0, [1, -2]=>0, [-2, -2]=>1, [-3, -2]=>0, [-2, -3]=>1, [-2, -4]=>1, [-1, -4]=>0, [-2, -5]=>0, [-3, -4]=>1, [-3, -5]=>0, [-4, -4]=>1, [-4, -5]=>0, [-5, -4]=>1, [-6, -4]=>1, [-6, -5]=>0, [-5, -5]=>0, [-7, -4]=>1, [-7, -5]=>0, [-8, -4]=>1, [-8, -5]=>0, [-9, -4]=>0, [-8, -3]=>1, [-9, -3]=>0, [-8, -2]=>1, [-9, -2]=>1, [-10, -2]=>1, [-11, -2]=>0, [-10, -3]=>0, [-10, -1]=>1, [-11, -1]=>0, [-10, 0]=>1, [-11, 0]=>1, [-12, 0]=>1, [-13, 0]=>0, [-12, -1]=>0, [-12, 1]=>1, [-13, 1]=>0, [-12, 2]=>1, [-13, 2]=>0, [-12, 3]=>1, [-13, 3]=>0, [-12, 4]=>1, [-13, 4]=>0, [-12, 5]=>1, [-13, 5]=>0, [-12, 6]=>1, [-13, 6]=>0, [-12, 7]=>1, [-13, 7]=>0, [-12, 8]=>1, [-13, 8]=>0, [-12, 9]=>0, [-11, 8]=>1, [-11, 9]=>0, [-10, 8]=>1, [-10, 9]=>1, [-10, 10]=>1, [-11, 10]=>0, [-10, 11]=>1, [-11, 11]=>0, [-10, 12]=>1, [-11, 12]=>0, [-10, 13]=>1, [-11, 13]=>0, [-10, 14]=>1, [-11, 14]=>0, [-10, 15]=>1, [-11, 15]=>0, [-10, 16]=>1, [-11, 16]=>0, [-10, 17]=>0, [-9, 16]=>1, [-9, 17]=>0, [-8, 16]=>1, [-8, 17]=>1, [-7, 17]=>0, [-8, 18]=>1, [-9, 18]=>0, [-8, 19]=>0, [-7, 18]=>1, [-7, 19]=>0, [-6, 18]=>1, [-6, 19]=>0, [-5, 18]=>0, [-6, 17]=>1, [-5, 17]=>0, [-6, 16]=>1, [-5, 16]=>0, [-6, 15]=>1, [-5, 15]=>0, [-6, 14]=>1, [-5, 14]=>1, [-4, 14]=>1, [-4, 15]=>0, [-3, 14]=>1, [-3, 15]=>0, [-2, 14]=>1, [-2, 15]=>0, [-1, 14]=>1, [-1, 15]=>0, [0, 14]=>1, [0, 15]=>0, [1, 14]=>1, [1, 15]=>0, [2, 14]=>1, [2, 15]=>0, [3, 14]=>1, [3, 15]=>0, [4, 14]=>1, [4, 15]=>0, [5, 14]=>0, [4, 13]=>1, [5, 13]=>0, [4, 12]=>1, [5, 12]=>0, [4, 11]=>0, [3, 12]=>1, [3, 11]=>0, [2, 12]=>1, [2, 11]=>0, [1, 12]=>1, [1, 11]=>0, [0, 12]=>1, [0, 11]=>1, [-1, 11]=>0, [0, 10]=>1, [1, 10]=>0, [0, 9]=>0, [-1, 10]=>1, [-1, 9]=>0, [-2, 10]=>1, [-2, 9]=>0, [-3, 10]=>0, [-2, 11]=>1, [-3, 11]=>0, [-2, 12]=>1, [-3, 12]=>1, [-4, 12]=>1, [-4, 11]=>1, [-4, 10]=>1, [-4, 9]=>0, [-5, 10]=>1, [-5, 9]=>0, [-6, 10]=>1, [-6, 9]=>0, [-7, 10]=>0, [-6, 11]=>1, [-7, 11]=>0, [-6, 12]=>1, [-7, 12]=>1, [-8, 12]=>1, [-8, 11]=>1, [-8, 10]=>1, [-8, 9]=>1, [-8, 8]=>1, [-7, 8]=>1, [-6, 8]=>1, [-5, 8]=>0, [-6, 7]=>1, [-5, 7]=>0, [-6, 6]=>1, [-5, 6]=>0, [-6, 5]=>1, [-5, 5]=>0, [-6, 4]=>1, [-5, 4]=>1, [-4, 4]=>1, [-4, 5]=>1, [-4, 6]=>1, [-4, 7]=>1, [-4, 8]=>1, [-3, 8]=>1, [-3, 9]=>0, [-2, 8]=>1, [-1, 8]=>0, [-2, 7]=>1, [-1, 7]=>0, [-2, 6]=>1, [-1, 6]=>0, [-2, 5]=>1, [-1, 5]=>0, [-2, 4]=>1, [-1, 4]=>1, [0, 4]=>1, [0, 5]=>0, [1, 4]=>0, [0, 3]=>1, [1, 3]=>0, [0, 2]=>1, [1, 2]=>1, [2, 2]=>1, [2, 3]=>0, [3, 2]=>1, [4, 2]=>1, [5, 2]=>1, [3, 3]=>0, [4, 3]=>0, [5, 3]=>0, [6, 2]=>1, [6, 3]=>0, [7, 2]=>1, [7, 3]=>0, [8, 2]=>1, [8, 3]=>0, [9, 2]=>0, [8, 1]=>1, [9, 1]=>0, [8, 0]=>1, [9, 0]=>0, [8, -1]=>1, [9, -1]=>0, [8, -2]=>1, [9, -2]=>0, [8, -3]=>0, [7, -2]=>1, [7, -3]=>0, [6, -2]=>1, [6, -3]=>0, [5, -2]=>0, [6, -1]=>1, [5, -1]=>0, [6, 0]=>1, [5, 0]=>1, [4, 0]=>1, [4, -1]=>0, [3, 0]=>1, [3, -1]=>0, [2, 0]=>1, [2, -1]=>1, [2, -2]=>1, [3, -2]=>1, [3, -3]=>0, [4, -2]=>1, [4, -3]=>1, [5, -3]=>0, [4, -4]=>1, [5, -4]=>1, [6, -4]=>1, [7, -4]=>1, [8, -4]=>1, [9, -4]=>0, [8, -5]=>1, [9, -5]=>0, [8, -6]=>1, [8, -7]=>0, [9, -6]=>0, [7, -6]=>1, [7, -7]=>0, [6, -6]=>1, [6, -7]=>1, [5, -7]=>0, [6, -8]=>1, [6, -9]=>1, [7, -8]=>0, [7, -9]=>0, [6, -10]=>1, [7, -10]=>0, [6, -11]=>1, [7, -11]=>0, [6, -12]=>1, [7, -12]=>0, [6, -13]=>0, [5, -12]=>1, [5, -13]=>0, [4, -12]=>1, [4, -13]=>1, [4, -14]=>1, [5, -14]=>0, [4, -15]=>1, [5, -15]=>0, [4, -16]=>1, [5, -16]=>0, [4, -17]=>0, [3, -16]=>1, [3, -17]=>0, [2, -16]=>1, [2, -17]=>0, [1, -16]=>1, [1, -17]=>0, [0, -16]=>1, [0, -17]=>0, [-1, -16]=>1, [-1, -17]=>0, [-2, -16]=>1, [-2, -17]=>1, [-3, -17]=>0, [-2, -18]=>1, [-1, -18]=>1, [0, -18]=>1, [1, -18]=>1, [2, -18]=>1, [3, -18]=>0, [2, -19]=>1, [3, -19]=>0, [2, -20]=>1, [3, -20]=>1, [4, -20]=>1, [4, -19]=>1, [4, -18]=>1, [5, -18]=>1, [5, -17]=>0, [6, -18]=>1, [6, -17]=>1, [7, -17]=>0, [6, -16]=>1, [7, -16]=>1, [6, -15]=>0, [7, -15]=>0, [8, -16]=>1, [8, -15]=>0, [9, -16]=>1, [9, -15]=>0, [10, -16]=>1, [10, -15]=>1, [10, -14]=>1, [9, -14]=>0, [10, -13]=>1, [9, -13]=>0, [10, -12]=>1, [9, -12]=>1, [8, -12]=>1, [8, -13]=>1, [8, -14]=>1, [7, -14]=>1, [7, -13]=>0, [6, -14]=>1, [8, -11]=>1, [8, -10]=>1, [8, -9]=>0, [9, -10]=>1, [9, -9]=>0, [10, -10]=>1, [10, -9]=>1, [11, -9]=>0, [10, -8]=>1, [9, -8]=>1, [8, -8]=>1, [9, -7]=>0, [10, -7]=>1, [10, -6]=>1, [10, -5]=>0, [11, -6]=>1, [11, -5]=>0, [12, -6]=>1, [12, -5]=>0, [13, -6]=>1, [13, -5]=>0, [14, -6]=>1, [14, -5]=>0, [15, -6]=>0, [14, -7]=>1, [15, -7]=>0, [14, -8]=>1, [15, -8]=>0, [14, -9]=>0, [13, -8]=>1, [13, -9]=>0, [12, -8]=>1, [12, -9]=>1, [12, -7]=>0, [11, -8]=>0, [13, -7]=>0, [11, -7]=>0, [11, -10]=>0, [10, -11]=>0, [9, -11]=>0, [11, -12]=>0, [11, -13]=>0, [11, -14]=>0, [11, -15]=>0, [11, -16]=>0, [10, -17]=>0, [9, -17]=>0, [8, -17]=>0, [7, -18]=>0, [6, -19]=>0, [5, -19]=>0, [4, -21]=>0, [5, -20]=>0, [3, -21]=>0, [2, -21]=>0, [1, -20]=>1, [1, -21]=>0, [0, -20]=>1, [0, -21]=>0, [-1, -20]=>1, [-1, -21]=>0, [-2, -20]=>1, [-2, -21]=>0, [-3, -20]=>1, [-3, -21]=>0, [-4, -20]=>1, [-4, -21]=>0, [-5, -20]=>1, [-5, -21]=>0, [-6, -20]=>1, [-6, -21]=>0, [-7, -20]=>0, [-6, -19]=>1, [-7, -19]=>0, [-6, -18]=>1, [-7, -18]=>0, [-6, -17]=>1, [-7, -17]=>0, [-6, -16]=>1, [-7, -16]=>0, [-6, -15]=>0, [-5, -16]=>1, [-5, -15]=>0, [-5, -17]=>0, [-5, -18]=>0, [-5, -19]=>0, [-3, -19]=>0, [-4, -19]=>0, [-2, -19]=>0, [-1, -19]=>0, [0, -19]=>0, [1, -19]=>0, [-3, -18]=>0, [-4, -16]=>1, [-4, -15]=>1, [-3, -15]=>0, [-4, -14]=>1, [-5, -14]=>0, [-4, -13]=>0, [-3, -14]=>1, [-3, -13]=>0, [-2, -14]=>1, [-2, -15]=>0, [-1, -14]=>1, [-1, -15]=>0, [-3, -16]=>0, [0, -14]=>1, [1, -14]=>1, [2, -14]=>1, [2, -15]=>0, [1, -15]=>0, [0, -15]=>0, [3, -14]=>0, [2, -13]=>1, [3, -13]=>0, [1, -13]=>0, [0, -13]=>0, [-1, -13]=>0, [-2, -13]=>0, [2, -12]=>1, [3, -12]=>0, [2, -11]=>0, [1, -12]=>1, [0, -12]=>1, [-1, -12]=>0, [0, -11]=>1, [-1, -11]=>0, [0, -10]=>1, [-1, -10]=>0, [1, -10]=>1, [2, -10]=>1, [3, -10]=>0, [0, -9]=>0, [1, -9]=>0, [2, -9]=>1, [3, -9]=>0, [2, -8]=>1, [3, -8]=>0, [1, -8]=>0, [2, -7]=>1, [1, -7]=>0, [3, -7]=>0, [2, -6]=>1, [1, -6]=>1, [0, -6]=>1, [0, -7]=>0, [-1, -6]=>1, [-1, -7]=>0, [-2, -6]=>1, [-2, -7]=>1, [-2, -8]=>1, [-1, -8]=>1, [0, -8]=>1, [-1, -9]=>0, [-2, -9]=>0, [-3, -8]=>1, [-3, -9]=>0, [-4, -8]=>1, [-4, -9]=>0, [-5, -8]=>0, [-4, -7]=>1, [-5, -7]=>0, [-4, -6]=>1, [-5, -6]=>1, [-6, -6]=>1, [-6, -7]=>0, [-7, -6]=>1, [-7, -7]=>0, [-8, -6]=>1, [-9, -6]=>0, [-8, -7]=>1, [-8, -8]=>1, [-7, -8]=>0, [-8, -9]=>0, [-9, -8]=>1, [-9, -9]=>0, [-10, -8]=>1, [-10, -9]=>1, [-11, -9]=>0, [-10, -10]=>1, [-9, -10]=>0, [-10, -11]=>0, [-11, -10]=>1, [-11, -11]=>0, [-12, -10]=>1, [-13, -10]=>1, [-12, -11]=>0, [-13, -11]=>0, [-14, -10]=>1, [-14, -11]=>1, [-14, -12]=>1, [-13, -12]=>1, [-12, -12]=>1, [-11, -12]=>1, [-10, -12]=>1, [-9, -12]=>0, [-10, -13]=>1, [-9, -13]=>0, [-10, -14]=>1, [-9, -14]=>1, [-8, -14]=>1, [-8, -13]=>0, [-7, -14]=>1, [-7, -13]=>0, [-6, -14]=>1, [-6, -13]=>1, [-6, -12]=>1, [-7, -12]=>1, [-8, -12]=>1, [-8, -11]=>1, [-9, -11]=>0, [-7, -11]=>0, [-8, -10]=>1, [-7, -10]=>1, [-7, -9]=>0, [-6, -10]=>1, [-6, -9]=>1, [-6, -11]=>0, [-5, -10]=>1, [-4, -10]=>1, [-3, -10]=>1, [-3, -11]=>0, [-2, -10]=>1, [-2, -11]=>1, [-2, -12]=>1, [-3, -12]=>1, [-4, -12]=>1, [-4, -11]=>0, [-5, -12]=>0, [-5, -11]=>0, [-5, -13]=>0, [-8, -15]=>1, [-7, -15]=>0, [-9, -15]=>0, [-8, -16]=>1, [-8, -17]=>0, [-9, -16]=>1, [-9, -17]=>0, [-10, -16]=>1, [-10, -17]=>1, [-10, -18]=>1, [-9, -18]=>0, [-10, -19]=>1, [-9, -19]=>0, [-10, -20]=>1, [-9, -20]=>1, [-8, -20]=>1, [-8, -19]=>1, [-8, -18]=>1, [-8, -21]=>0, [-9, -21]=>0, [-10, -21]=>0, [-11, -20]=>1, [-11, -21]=>0, [-12, -20]=>1, [-12, -21]=>0, [-13, -20]=>1, [-13, -21]=>0, [-14, -20]=>1, [-14, -21]=>0, [-15, -20]=>1, [-15, -21]=>0, [-16, -20]=>1, [-16, -21]=>0, [-17, -20]=>0, [-16, -19]=>1, [-17, -19]=>0, [-16, -18]=>1, [-17, -18]=>0, [-16, -17]=>0, [-15, -18]=>1, [-15, -17]=>0, [-14, -18]=>1, [-14, -17]=>0, [-14, -19]=>0, [-15, -19]=>0, [-13, -18]=>1, [-13, -19]=>0, [-12, -18]=>1, [-12, -19]=>0, [-11, -18]=>0, [-11, -19]=>0, [-11, -17]=>0, [-10, -15]=>0, [-11, -16]=>0, [-13, -17]=>0, [-12, -17]=>1, [-12, -16]=>1, [-12, -15]=>1, [-11, -15]=>0, [-13, -16]=>0, [-13, -15]=>0, [-12, -14]=>1, [-13, -14]=>1, [-14, -14]=>1, [-14, -15]=>0, [-15, -14]=>1, [-15, -15]=>0, [-16, -14]=>1, [-16, -15]=>1, [-16, -16]=>1, [-15, -16]=>1, [-14, -16]=>1, [-17, -16]=>1, [-18, -16]=>1, [-18, -17]=>0, [-17, -17]=>0, [-19, -16]=>0, [-18, -15]=>1, [-19, -15]=>0, [-18, -14]=>1, [-19, -14]=>0, [-18, -13]=>1, [-19, -13]=>0, [-18, -12]=>1, [-19, -12]=>0, [-18, -11]=>1, [-19, -11]=>0, [-18, -10]=>1, [-19, -10]=>0, [-18, -9]=>1, [-19, -9]=>0, [-18, -8]=>1, [-19, -8]=>0, [-18, -7]=>0, [-17, -8]=>1, [-17, -7]=>0, [-16, -8]=>1, [-16, -7]=>1, [-15, -7]=>0, [-16, -6]=>1, [-17, -6]=>0, [-16, -5]=>0, [-15, -6]=>1, [-15, -5]=>0, [-14, -6]=>1, [-14, -5]=>0, [-14, -7]=>0, [-17, -9]=>0, [-16, -9]=>1, [-16, -10]=>1, [-16, -11]=>1, [-16, -12]=>1, [-16, -13]=>0, [-15, -12]=>0, [-17, -12]=>0, [-17, -11]=>0, [-15, -11]=>0, [-17, -10]=>0, [-15, -10]=>0, [-15, -9]=>0, [-15, -8]=>0, [-17, -14]=>0, [-17, -15]=>0, [-12, -13]=>0, [-11, -14]=>0, [-13, -13]=>0, [-14, -13]=>0, [-15, -13]=>0, [-13, -6]=>1, [-13, -7]=>0, [-12, -6]=>1, [-12, -7]=>1, [-11, -7]=>0, [-12, -8]=>1, [-13, -8]=>1, [-14, -8]=>1, [-14, -9]=>0, [-13, -9]=>0, [-12, -9]=>0, [-11, -8]=>0, [-11, -6]=>1, [-10, -6]=>1, [-10, -7]=>0, [-10, -5]=>1, [-9, -5]=>0, [-11, -5]=>0, [-10, -4]=>1, [-11, -4]=>1, [-12, -4]=>1, [-12, -5]=>0, [-13, -4]=>1, [-13, -5]=>0, [-14, -4]=>1, [-15, -4]=>0, [-14, -3]=>1, [-15, -3]=>0, [-14, -2]=>1, [-15, -2]=>0, [-14, -1]=>1, [-15, -1]=>0, [-14, 0]=>1, [-15, 0]=>0, [-14, 1]=>1, [-15, 1]=>0, [-14, 2]=>1, [-15, 2]=>1, [-14, 3]=>0, [-13, -2]=>1, [-12, -2]=>1, [-12, -3]=>0, [-13, -3]=>0, [-11, -3]=>0, [-16, 2]=>1, [-16, 1]=>0, [-17, 2]=>1, [-17, 1]=>0, [-18, 2]=>1, [-18, 1]=>1, [-19, 1]=>0, [-18, 0]=>1, [-17, 0]=>0, [-18, -1]=>0, [-19, 0]=>1, [-19, -1]=>0, [-20, 0]=>1, [-20, -1]=>1, [-20, -2]=>1, [-19, -2]=>0, [-20, -3]=>1, [-19, -3]=>0, [-20, -4]=>1, [-19, -4]=>0, [-20, -5]=>1, [-19, -5]=>0, [-20, -6]=>1, [-19, -6]=>1, [-18, -6]=>1, [-18, -5]=>1, [-18, -4]=>1, [-17, -4]=>1, [-17, -3]=>0, [-16, -4]=>1, [-16, -3]=>1, [-16, -2]=>1, [-17, -2]=>1, [-18, -2]=>1, [-16, -1]=>1, [-17, -1]=>0, [-18, -3]=>0, [-17, -5]=>0, [-19, -7]=>0, [-20, -7]=>1, [-20, -8]=>1, [-20, -9]=>1, [-20, -10]=>1, [-20, -11]=>1, [-20, -12]=>1, [-20, -13]=>1, [-20, -14]=>1, [-20, -15]=>1, [-20, -16]=>1, [-20, -17]=>1, [-19, -17]=>0, [-20, -18]=>1, [-19, -18]=>0, [-20, -19]=>1, [-19, -19]=>0, [-20, -20]=>1, [-19, -20]=>1, [-18, -20]=>1, [-18, -19]=>1, [-18, -18]=>1, [-18, -21]=>0, [-19, -21]=>0, [-20, -21]=>0, [-21, -20]=>0, [-21, -19]=>0, [-21, -18]=>0, [-21, -17]=>0, [-21, -16]=>0, [-21, -15]=>0, [-21, -14]=>0, [-21, -13]=>0, [-21, -12]=>0, [-21, -11]=>0, [-21, -10]=>0, [-21, -9]=>0, [-21, -8]=>0, [-21, -7]=>0, [-21, -6]=>0, [-21, -5]=>0, [-21, -4]=>0, [-21, -3]=>0, [-21, -2]=>0, [-21, -1]=>0, [-21, 0]=>0, [-20, 1]=>1, [-21, 1]=>0, [-20, 2]=>1, [-19, 2]=>0, [-21, 2]=>0, [-20, 3]=>1, [-21, 3]=>0, [-19, 3]=>0, [-20, 4]=>1, [-21, 4]=>0, [-20, 5]=>0, [-19, 4]=>1, [-19, 5]=>0, [-18, 4]=>1, [-18, 5]=>1, [-18, 3]=>0, [-17, 4]=>0, [-17, 5]=>0, [-18, 6]=>1, [-17, 6]=>0, [-18, 7]=>0, [-19, 6]=>1, [-20, 6]=>1, [-21, 6]=>0, [-20, 7]=>1, [-21, 7]=>0, [-20, 8]=>1, [-21, 8]=>0, [-20, 9]=>0, [-19, 8]=>1, [-18, 8]=>1, [-17, 8]=>0, [-18, 9]=>1, [-19, 9]=>0, [-18, 10]=>1, [-19, 10]=>0, [-18, 11]=>0, [-17, 10]=>1, [-17, 11]=>0, [-16, 10]=>1, [-16, 11]=>0, [-16, 9]=>0, [-15, 10]=>1, [-15, 9]=>0, [-14, 10]=>1, [-14, 9]=>1, [-14, 8]=>1, [-15, 8]=>1, [-15, 7]=>0, [-16, 8]=>1, [-16, 7]=>1, [-16, 6]=>1, [-15, 6]=>0, [-16, 5]=>1, [-15, 5]=>0, [-14, 7]=>0, [-16, 4]=>1, [-15, 4]=>1, [-14, 4]=>1, [-14, 5]=>1, [-14, 6]=>1, [-15, 3]=>0, [-16, 3]=>0, [-13, 10]=>0, [-14, 11]=>1, [-13, 11]=>0, [-14, 12]=>1, [-15, 12]=>0, [-15, 11]=>0, [-13, 12]=>1, [-12, 12]=>1, [-12, 11]=>1, [-12, 10]=>1, [-14, 13]=>0, [-13, 13]=>0, [-12, 13]=>1, [-12, 14]=>1, [-13, 14]=>1, [-14, 14]=>1, [-15, 14]=>1, [-15, 13]=>0, [-16, 14]=>1, [-16, 13]=>1, [-16, 12]=>1, [-17, 12]=>1, [-18, 12]=>1, [-19, 12]=>0, [-18, 13]=>1, [-19, 13]=>0, [-18, 14]=>1, [-19, 14]=>0, [-18, 15]=>1, [-19, 15]=>0, [-18, 16]=>1, [-19, 16]=>0, [-18, 17]=>1, [-19, 17]=>0, [-18, 18]=>1, [-19, 18]=>1, [-20, 18]=>1, [-20, 17]=>1, [-20, 16]=>1, [-20, 15]=>1, [-20, 14]=>1, [-20, 13]=>1, [-20, 12]=>1, [-20, 11]=>1, [-19, 11]=>0, [-20, 10]=>1, [-21, 10]=>0, [-21, 11]=>0, [-21, 12]=>0, [-21, 13]=>0, [-21, 14]=>0, [-21, 15]=>0, [-21, 16]=>0, [-21, 17]=>0, [-21, 18]=>0, [-20, 19]=>0, [-19, 19]=>0, [-18, 19]=>0, [-17, 18]=>1, [-17, 19]=>0, [-16, 18]=>1, [-16, 19]=>0, [-15, 18]=>1, [-15, 19]=>0, [-14, 18]=>1, [-14, 19]=>0, [-13, 18]=>0, [-14, 17]=>1, [-13, 17]=>0, [-14, 16]=>1, [-13, 16]=>1, [-12, 16]=>1, [-12, 17]=>1, [-12, 18]=>1, [-12, 19]=>0, [-11, 18]=>1, [-11, 19]=>0, [-10, 18]=>1, [-10, 19]=>0, [-15, 16]=>1, [-16, 16]=>1, [-17, 16]=>0, [-16, 17]=>0, [-15, 17]=>0, [-17, 17]=>0, [-17, 15]=>0, [-17, 14]=>0, [-17, 13]=>0, [-16, 15]=>0, [-15, 15]=>0, [-14, 15]=>0, [-13, 15]=>0, [-12, 15]=>0, [-11, 17]=>0, [-17, 9]=>0, [-19, 7]=>0, [-13, 9]=>0, [-17, 7]=>0, [-17, 3]=>0, [-13, -1]=>0, [-16, 0]=>1, [-17, -13]=>0, [-11, -13]=>0, [-9, -7]=>0, [-3, -6]=>0, [-3, -7]=>0, [-1, -5]=>0, [0, -5]=>1, [0, -4]=>1, [2, -5]=>0, [1, -5]=>0, [1, -4]=>1, [2, -4]=>1, [3, -4]=>0, [2, -3]=>0, [1, -3]=>0, [3, -6]=>1, [3, -5]=>0, [4, -6]=>1, [4, -5]=>0, [5, -6]=>0, [4, -7]=>1, [4, -8]=>1, [4, -9]=>1, [4, -10]=>1, [4, -11]=>0, [5, -10]=>0, [5, -9]=>0, [5, -8]=>0, [1, -11]=>0, [-4, -17]=>1, [-4, -18]=>1, [3, -15]=>0, [5, -11]=>0, [7, -5]=>0, [6, -5]=>0, [7, -1]=>0, [7, 0]=>0, [7, 1]=>0, [6, 1]=>0, [5, 1]=>0, [4, 1]=>0, [3, 1]=>0, [2, 1]=>0, [1, 1]=>0, [-1, 3]=>0, [-1, 2]=>1, [-1, 1]=>0, [-2, 2]=>1, [-2, 1]=>0, [-3, 2]=>1, [-3, 1]=>0, [-4, 2]=>1, [-4, 1]=>1, [-5, 1]=>0, [-4, 0]=>1, [-3, 0]=>1, [-2, 0]=>1, [-1, 0]=>0, [-2, -1]=>0, [-3, -1]=>0, [-4, -1]=>1, [-4, -2]=>1, [-5, -2]=>1, [-5, -1]=>0, [-5, 0]=>0, [-4, -3]=>0, [-5, -3]=>0, [-6, -2]=>1, [-6, -3]=>0, [-7, -2]=>0, [-6, -1]=>1, [-7, -1]=>0, [-6, 0]=>1, [-7, 0]=>1, [-8, 0]=>1, [-8, -1]=>0, [-9, 0]=>0, [-8, 1]=>1, [-7, 1]=>0, [-9, 1]=>0, [-8, 2]=>1, [-9, 2]=>0, [-7, 2]=>1, [-6, 2]=>1, [-6, 1]=>0, [-5, 2]=>0, [-8, 3]=>1, [-9, 3]=>0, [-8, 4]=>1, [-9, 4]=>1, [-10, 4]=>1, [-10, 3]=>1, [-10, 2]=>1, [-10, 1]=>0, [-11, 2]=>0, [-11, 3]=>0, [-11, 4]=>0, [-10, 5]=>1, [-11, 5]=>0, [-10, 6]=>1, [-11, 6]=>0, [-10, 7]=>0, [-9, 6]=>1, [-9, 7]=>0, [-8, 6]=>1, [-8, 7]=>0, [-7, 6]=>0, [-8, 5]=>0, [-9, 5]=>0, [-7, 4]=>0, [-7, 3]=>0, [-6, 3]=>0, [-4, 3]=>0, [-3, 3]=>0, [-2, 3]=>0, [-3, 4]=>0, [-3, 5]=>0, [-3, 6]=>0, [-3, 7]=>0, [-5, 3]=>0, [-7, 5]=>0, [-7, 7]=>0, [-7, 9]=>0, [-9, 8]=>0, [-9, 9]=>0, [-9, 10]=>0, [-9, 11]=>0, [-9, 12]=>0, [-5, 11]=>0, [3, 13]=>0, [2, 13]=>0, [1, 13]=>0, [0, 13]=>0, [-1, 12]=>0, [-1, 13]=>0, [-2, 13]=>0, [-3, 13]=>0, [-4, 13]=>0, [-5, 13]=>0, [-7, 16]=>0, [-7, 15]=>0, [-7, 14]=>0, [-6, 13]=>0, [-9, 15]=>0, [-8, 15]=>0, [-9, 14]=>0, [-9, 13]=>0, [-5, 12]=>0, [-8, 13]=>1, [-7, 13]=>0, [-11, 7]=>0, [-3, -3]=>0, [-7, -3]=>0, [-9, -1]=>0, [-11, 1]=>0, [0, 0]=>1, [-8, 14]=>1, [5, -5]=>0, [12, -10]=>1, [13, -10]=>0, [12, -11]=>1, [11, -11]=>0, [12, -12]=>1, [12, -13]=>0, [13, -11]=>0, [13, -12]=>1, [13, -13]=>0, [14, -12]=>1, [14, -13]=>0, [14, -11]=>0, [15, -12]=>1, [15, -13]=>0, [16, -12]=>1, [16, -13]=>0, [17, -12]=>0, [16, -11]=>1, [15, -11]=>0, [16, -10]=>1, [15, -10]=>1, [14, -10]=>1, [15, -9]=>0, [16, -9]=>0, [17, -10]=>1, [17, -11]=>0, [18, -10]=>1, [18, -11]=>1, [18, -12]=>1, [18, -13]=>1, [17, -13]=>0, [18, -14]=>1, [17, -14]=>1, [16, -14]=>1, [15, -14]=>0, [17, -15]=>0, [16, -15]=>1, [18, -15]=>0, [19, -14]=>0, [19, -13]=>0, [19, -12]=>0, [19, -11]=>0, [19, -10]=>0, [18, -9]=>1, [19, -9]=>0, [18, -8]=>1, [19, -8]=>0, [18, -7]=>1, [19, -7]=>0, [18, -6]=>1, [17, -6]=>0, [17, -7]=>0, [17, -8]=>0, [17, -9]=>0, [15, -15]=>0, [16, -16]=>1, [15, -16]=>0, [16, -17]=>0, [17, -16]=>1, [17, -17]=>0, [18, -16]=>1, [18, -17]=>1, [18, -18]=>1, [17, -18]=>0, [18, -19]=>1, [17, -19]=>0, [19, -19]=>0, [19, -18]=>0, [19, -17]=>0, [19, -16]=>0, [18, -20]=>1, [17, -20]=>1, [19, -20]=>0, [18, -21]=>0, [17, -21]=>0, [16, -20]=>1, [16, -21]=>0, [15, -20]=>1, [15, -21]=>0, [14, -20]=>1, [14, -21]=>0, [16, -19]=>0, [15, -19]=>0, [14, -19]=>1, [13, -19]=>0, [13, -20]=>0, [14, -18]=>1, [15, -18]=>1, [16, -18]=>1, [14, -17]=>0, [15, -17]=>0, [13, -18]=>1, [13, -17]=>0, [12, -18]=>1, [12, -17]=>1, [12, -16]=>1, [13, -16]=>1, [14, -16]=>1, [14, -15]=>1, [13, -15]=>0, [12, -15]=>0, [14, -14]=>1, [13, -14]=>1, [12, -14]=>1, [11, -17]=>0, [11, -18]=>0, [12, -19]=>1, [11, -19]=>0, [12, -20]=>1, [11, -20]=>1, [11, -21]=>0, [12, -21]=>0, [10, -20]=>1, [10, -19]=>1, [10, -18]=>1, [9, -18]=>1, [8, -18]=>1, [8, -19]=>1, [9, -19]=>0, [8, -20]=>1, [7, -20]=>1, [6, -20]=>1, [7, -21]=>0, [8, -21]=>0, [9, -20]=>0, [6, -21]=>0, [10, -21]=>0, [19, -6]=>0, [18, -5]=>1, [17, -5]=>0, [19, -5]=>0, [18, -4]=>1, [17, -4]=>1, [19, -4]=>0, [16, -4]=>1, [16, -5]=>1, [16, -6]=>1, [16, -7]=>1, [16, -8]=>1, [15, -5]=>0, [15, -4]=>0, [17, -3]=>0, [18, -3]=>0, [16, -3]=>1, [15, -3]=>0, [16, -2]=>1, [17, -2]=>1, [15, -2]=>0, [16, -1]=>0, [17, -1]=>0, [18, -2]=>1, [18, -1]=>1, [19, -2]=>0, [19, -1]=>0, [18, 0]=>1, [19, 0]=>0, [17, 0]=>1, [16, 0]=>1, [18, 1]=>0, [17, 1]=>0, [16, 1]=>1, [15, 0]=>0, [15, 1]=>0, [16, 2]=>1, [17, 2]=>1, [18, 2]=>1, [19, 2]=>0, [15, 2]=>0, [16, 3]=>0, [18, 3]=>1, [19, 3]=>0, [17, 3]=>0, [18, 4]=>1, [19, 4]=>0, [17, 4]=>1, [16, 4]=>1, [15, 4]=>0, [17, 5]=>0, [18, 5]=>0, [16, 5]=>1, [15, 5]=>0, [16, 6]=>1, [17, 6]=>1, [17, 7]=>0, [18, 6]=>1, [19, 6]=>0, [16, 7]=>0, [15, 6]=>0, [18, 7]=>1, [19, 7]=>0, [18, 8]=>1, [19, 8]=>0, [17, 8]=>0, [18, 9]=>1, [19, 9]=>0, [17, 9]=>0, [18, 10]=>1, [19, 10]=>0, [17, 10]=>0, [18, 11]=>1, [19, 11]=>0, [17, 11]=>0, [18, 12]=>1, [19, 12]=>0, [17, 12]=>0, [18, 13]=>1, [19, 13]=>0, [17, 13]=>0, [18, 14]=>1, [19, 14]=>0, [17, 14]=>1, [18, 15]=>0, [17, 15]=>0, [16, 14]=>1, [16, 15]=>0, [15, 14]=>0, [16, 13]=>1, [15, 13]=>0, [16, 12]=>1, [15, 12]=>1, [16, 11]=>0, [15, 11]=>0, [14, 12]=>1, [14, 11]=>1, [14, 13]=>0, [13, 12]=>0, [13, 11]=>0, [14, 10]=>1, [15, 10]=>1, [16, 10]=>1, [16, 9]=>1, [14, 9]=>0, [13, 10]=>0, [15, 9]=>0, [16, 8]=>1, [15, 8]=>1, [15, 7]=>0, [14, 8]=>1, [14, 7]=>0, [13, 8]=>1, [13, 7]=>0, [13, 9]=>0, [12, 8]=>1, [12, 7]=>0, [11, 8]=>1, [12, 9]=>0, [11, 7]=>0, [11, 9]=>0, [10, 8]=>1, [10, 7]=>1, [10, 6]=>1, [11, 6]=>1, [12, 6]=>1, [12, 5]=>1, [13, 6]=>0, [13, 5]=>0, [11, 5]=>0, [9, 7]=>0, [9, 8]=>0, [10, 9]=>0, [9, 6]=>0, [10, 5]=>0, [12, 4]=>1, [13, 4]=>1, [14, 4]=>1, [14, 5]=>1, [14, 6]=>1, [12, 3]=>0, [13, 3]=>0, [14, 3]=>1, [15, 3]=>0, [14, 2]=>1, [13, 2]=>0, [14, 1]=>1, [13, 1]=>0, [14, 0]=>1, [11, 4]=>0, [13, 0]=>1, [14, -1]=>0, [13, -1]=>0, [12, 0]=>1, [12, -1]=>0, [12, 1]=>1, [11, 0]=>0, [11, 1]=>0, [12, 2]=>1, [11, 2]=>1, [10, 2]=>1, [11, 3]=>0, [10, 1]=>1, [10, 0]=>1, [10, -1]=>1, [11, -1]=>0, [10, -2]=>1, [11, -2]=>1, [10, -3]=>0, [11, -3]=>0, [12, -2]=>1, [12, -3]=>1, [13, -2]=>0, [13, -3]=>0, [12, -4]=>1, [11, -4]=>1, [10, -4]=>1, [13, -4]=>1, [14, -4]=>1, [14, -3]=>1, [14, -2]=>1, [10, 3]=>1, [10, 4]=>1, [9, 4]=>1, [9, 5]=>0, [8, 4]=>1, [7, 4]=>0, [8, 5]=>1, [7, 5]=>0, [8, 6]=>1, [7, 6]=>0, [8, 7]=>1, [7, 7]=>0, [8, 8]=>1, [7, 8]=>0, [8, 9]=>1, [7, 9]=>0, [9, 9]=>0, [8, 10]=>1, [9, 10]=>0, [7, 10]=>0, [8, 11]=>1, [9, 11]=>0, [7, 11]=>0, [8, 12]=>1, [9, 12]=>0, [7, 12]=>0, [8, 13]=>1, [9, 13]=>0, [7, 13]=>0, [8, 14]=>1, [7, 14]=>0, [9, 14]=>0, [8, 15]=>1, [9, 15]=>0, [7, 15]=>0, [8, 16]=>1, [7, 16]=>0, [9, 16]=>0, [8, 17]=>1, [7, 17]=>0, [9, 17]=>0, [8, 18]=>1, [7, 18]=>1, [9, 18]=>1, [8, 19]=>0, [7, 19]=>0, [9, 19]=>0, [10, 18]=>1, [10, 19]=>0, [6, 18]=>1, [6, 19]=>0, [6, 17]=>0, [5, 18]=>1, [5, 19]=>0, [4, 18]=>1, [4, 19]=>0, [3, 18]=>1, [3, 19]=>0, [2, 18]=>1, [2, 19]=>0, [1, 18]=>1, [1, 19]=>0, [0, 18]=>1, [0, 19]=>0, [5, 17]=>0, [4, 17]=>0, [3, 17]=>0, [2, 17]=>0, [1, 17]=>0, [0, 17]=>1, [-1, 18]=>0, [-1, 17]=>0, [0, 16]=>1, [1, 16]=>1, [2, 16]=>1, [3, 16]=>1, [4, 16]=>1, [5, 16]=>1, [6, 16]=>1, [6, 15]=>1, [6, 14]=>1, [6, 13]=>1, [6, 12]=>1, [-1, 16]=>1, [-2, 16]=>1, [-3, 16]=>0, [-2, 17]=>1, [-3, 17]=>0, [-2, 18]=>1, [-3, 18]=>1, [-4, 18]=>1, [-4, 17]=>1, [-4, 16]=>1, [-4, 19]=>0, [-3, 19]=>0, [-2, 19]=>0, [6, 11]=>1, [5, 11]=>0, [6, 10]=>1, [5, 10]=>0, [6, 9]=>1, [5, 9]=>0, [6, 8]=>1, [5, 8]=>0, [6, 7]=>1, [5, 7]=>0, [6, 6]=>1, [5, 6]=>0, [6, 5]=>1, [5, 5]=>0, [6, 4]=>1, [5, 4]=>1, [4, 4]=>1, [3, 4]=>0, [4, 5]=>1, [3, 5]=>0, [4, 6]=>1, [3, 6]=>0, [4, 7]=>1, [3, 7]=>0, [4, 8]=>1, [3, 8]=>0, [4, 9]=>1, [3, 9]=>0, [4, 10]=>1, [3, 10]=>1, [2, 10]=>1, [2, 9]=>1, [1, 9]=>0, [2, 8]=>1, [1, 8]=>0, [2, 7]=>1, [1, 7]=>0, [2, 6]=>1, [1, 6]=>1, [2, 5]=>1, [2, 4]=>1, [1, 5]=>0, [0, 6]=>1, [0, 7]=>1, [0, 8]=>1, [11, 18]=>0, [10, 17]=>1, [11, 17]=>0, [10, 16]=>1, [11, 16]=>0, [10, 15]=>1, [11, 15]=>0, [10, 14]=>1, [11, 14]=>0, [10, 13]=>1, [11, 13]=>0, [10, 12]=>1, [11, 12]=>0, [10, 11]=>1, [11, 11]=>0, [10, 10]=>1, [11, 10]=>1, [12, 10]=>1, [12, 11]=>1, [12, 12]=>1, [12, 13]=>1, [13, 13]=>0, [12, 14]=>1, [13, 14]=>0, [12, 15]=>1, [13, 15]=>0, [12, 16]=>1, [13, 16]=>0, [12, 17]=>1, [13, 17]=>0, [12, 18]=>1, [13, 18]=>1, [12, 19]=>0, [13, 19]=>0, [14, 18]=>1, [14, 19]=>0, [15, 18]=>1, [14, 17]=>0, [15, 19]=>0, [16, 18]=>1, [15, 17]=>0, [16, 19]=>0, [16, 17]=>0, [17, 18]=>1, [17, 19]=>0, [17, 17]=>0, [18, 18]=>1, [18, 19]=>0, [18, 17]=>1, [19, 17]=>0, [19, 18]=>0, [18, 16]=>1, [19, 16]=>0, [17, 16]=>1, [16, 16]=>1, [15, 16]=>1, [15, 15]=>0, [14, 16]=>1, [14, 15]=>1, [14, 14]=>2};
